# yaml-language-server: $schema=https://json.schemastore.org/lefthook.json

# By default lefthook uses true colors (e.g. #FFFFFF), but they may not be
# readable depending on the terminal background color. Instead I'm using ANSI
# colors since they come from the terminal's color palette.
# TODO: They should change this.
colors:
  # My terminal's light theme uses a shade of red as cyan so I'll use blue here
  # to make it easier to distinguish from errors.
  cyan: 4
  gray: 8
  green: 2
  red: 1
  yellow: 3

# SYNC: LEFTHOOK_OUTPUT
output:
  - execution_info

pre-push:
  commands:
    check:
      run: printf '%s\0' {push_files} | lefthook run check --files-from-stdin

post-merge:
  commands:
    mark-sync-point:
      run: >
        printf ORIG_HEAD >.git/sync-point-1.txt
        && printf HEAD >.git/sync-point-2.txt

post-rewrite:
  commands:
    mark-sync-point:
      only: rebase
      run: >
        printf ORIG_HEAD >.git/sync-point-1.txt
        && printf HEAD >.git/sync-point-2.txt

post-checkout:
  commands:
    mark-sync-point:
      # The conditional checks that this isn't a file checkout.
      #
      # TODO: Open an issue for passing the git hook arguments to the only/skip
      # commands, or add new skip/only conditions e.g. 'file' and 'branch'. Then
      # I could remove this conditional.
      run: >
        [ {3} != '0' ]
        && printf {1} >.git/sync-point-1.txt
        && printf {2} >.git/sync-point-2.txt;
        exit 0

sync:
  # So we can see the output of dev-shell and host-manager. It can take a while so
  # it's nice to see what it's doing. Plus some of these tasks print messages I want
  # to see.
  follow: true
  # Add '|| true' so lefthook doesn't exit with code 1
  files: >
    [ -f .git/sync-point-1.txt -a -f .git/sync-point-2.txt ]
    && git diff-tree -r --name-only --no-commit-id
    "$(cat .git/sync-point-1.txt)" "$(cat .git/sync-point-2.txt)"
    || true
  commands:
    direnv:
      priority: 1
      glob: ".envrc"
      run: just reload
    # Synchronize nix-direnv with the Nix devShell and reload the direnv
    # environment. nix-direnv is a direnv library that builds our Nix devShell and
    # makes all the packages within it available on the $PATH. Since building the
    # devShell can take a while, nix-direnv won't do it automatically. Instead,
    # it will only build the devShell when it's explicitly told to do
    # so, otherwise it just uses the last devShell it built. This task will tell
    # nix-direnv to rebuild the devShell and reload the direnv environment.
    dev-shell:
      priority: 1
      glob: "flake{.nix,.lock,-modules/{dev-shell/,lib,overlay/}**.nix}"
      # touch flake.nix to force nix-direnv to reload.
      # TODO: See if they can add an option to force because I don't want to
      # enumerate every file that can affect the dev shell.
      run: >
        touch flake.nix
        && nix-direnv-reload
        && just direnv-reminder
    nix-fix:
      priority: 1
      glob: "dotfiles/nix/nix-fix/**"
      # Must be interactive since the user will be prompted for their password,
      # for sudo.
      interactive: true
      run: bash dotfiles/nix/nix-fix/install-nix-fix.bash
    lefthook:
      priority: 1
      # TODO: No need for this yet since lefthook syncs hooks automatically, I
      # should ask them to make this optional.
      skip: true
      glob: ".lefthook.yml"
      run: lefthook install --force
    host-manager:
      interactive: true
      priority: 1
      glob: "{{dotfiles,flake-modules}/**,flake.{lock,nix}}"
      run: sudo run-as-admin hostctl-switch

    # These should run last so their messages aren't lost in the output of other
    # commands.
    fish:
      priority: 2
      glob: "dotfiles/fish/conf.d/**.fish"
      run: >
        printf
        '\n\e[34m┃ system-configurations: Files related to fish have changed, run `r`.\e(B\e[m\n'
    system-nix-config:
      priority: 2
      glob: "flake-modules/nix-darwin/modules/nix.nix"
      only:
        - run: uname | grep -q Linux
      run: >
        printf
        '\n\e[34m┃ system-configurations: The system Nix config in nix-darwin has changed, make sure this system's Nix config is still in sync with it.\e(B\e[m\n'

check:
  files: |
    echo "Error: Only use this with --files-from-stdin or --all-files" >&2
    exit 1
  commands:
    generate:
      priority: 1
      run: printf '%s\0' {files} | lefthook run generate --files-from-stdin
    fix-lint:
      priority: 2
      run: printf '%s\0' {files} | lefthook run fix-lint --files-from-stdin
    # Run formatting after lint fixes because sometimes a lint fix produces code
    # that doesn't comply with the formatting.
    format:
      priority: 3
      run: printf '%s\0' {files} | lefthook run format --files-from-stdin
    check-lint:
      priority: 4
      run: printf '%s\0' {files} | lefthook run check-lint --files-from-stdin

generate:
  files: |
    echo "Error: Only use this with --files-from-stdin or --all-files" >&2
    exit 1
  # SYNC: GENERATOR_PATTERNS
  commands:
    readme-table-of-contents:
      glob: README.md
      run: >
        ./scripts/fail-if-files-change.bash
        doctoc README.md --github
    neovim-plugin-list:
      glob: "*neovim/lua/*.lua"
      run: >
        ./scripts/fail-if-files-change.bash
        ./scripts/code-generation/generate-neovim-plugin-list.bash
    gomod2nix-lock:
      glob: "*gozip/go.mod"
      # It stopped working. This open issue shows the same error I got:
      # https://github.com/nix-community/gomod2nix/issues/172
      skip: true
      run: >
        ./scripts/fail-if-files-change.bash
        ./scripts/code-generation/generate-gomod2nix-lock.bash
    # I'd like to specify a glob so this only runs when a script file changes, but
    # since lefthook, understandably, doesn't consider deleted files, this task
    # wouldn't be able to remove dependencies when a script gets deleted. Instead,
    # I'll just always run it since it takes less than a second.
    script-dependencies:
      run: >
        ./scripts/fail-if-files-change.bash bash -o pipefail -euc '
        rg --glob "*.bash" "^#!" scripts
        | rg --only-matching --replace '\''$1'\'' "local#nixpkgs\.([^ ]*)"
        | sort --unique
        > scripts/dependencies.txt
        '
    nix-version:
      glob: "flake.lock"
      run: ./scripts/fail-if-files-change.bash ./scripts/sync-nix-version.bash
    configs:
      glob: "{flake-modules/**,flake.nix}"
      run: |
        ./scripts/fail-if-files-change.bash perl -0777 -i -pe "s{<!-- START_CONFIGURATIONS -->.*<!-- END_CONFIGURATIONS -->}{<!-- START_CONFIGURATIONS -->$(./scripts/get-host-configurations.bash)

        <!-- END_CONFIGURATIONS -->}igs" README.md

format:
  files: |
    echo "Error: Only use this with --files-from-stdin or --all-files" >&2
    exit 1
  commands:
    taplo:
      glob: "*.toml"
      exclude: [flake-modules/bundler/gozip/gomod2nix.toml]
      run: >
        ./scripts/fail-if-files-change.bash
        taplo format {files}
    prettier:
      glob: "*.{md,js,json,json{5,c},yml,yaml}"
      # VS Code's configuration files end in .json, so prettier will format
      # them using the json parser, but they are actually jsonc files.
      exclude: ["*.vscode/*.json"]
      # TODO: Get prettier to not log unchanged files:
      # https://github.com/prettier/prettier/issues/2611
      run: >
        ./scripts/fail-if-files-change.bash
        prettier --write {files}
    # VS Code's configuration files end in .json, but they are actually jsonc
    # files.
    prettier-vscode:
      glob: "*.vscode/*.json"
      run: >
        ./scripts/fail-if-files-change.bash
        prettier --parser jsonc --write {files}
    shfmt:
      glob: "*.{envrc,sh,bash}"
      run: >
        ./scripts/fail-if-files-change.bash
        shfmt --write {files}
    fish_indent:
      glob: "*.fish"
      run: >
        ./scripts/fail-if-files-change.bash
        fish_indent --write {files}
    nixfmt:
      glob: "*.nix"
      run: >
        ./scripts/fail-if-files-change.bash
        nixfmt {files}
    just:
      # TODO: just's builtin formatter currently removes/rearranges comments. Until
      # this is fixed I'll disable it: https://github.com/casey/just/issues/862.
      skip: true
      glob: "justfile"
      run: >
        ./scripts/fail-if-files-change.bash
        just --unstable --fmt --justfile {files}
    stylua:
      glob: "*.lua"
      run: >
        ./scripts/fail-if-files-change.bash
        stylua {files}
    gofmt:
      glob: "*.go"
      run: >
        ./scripts/fail-if-files-change.bash
        gofmt -w {files}
    ruff-format:
      glob: "*.py"
      run: >
        ./scripts/fail-if-files-change.bash
        ruff format {files}
    ruff-format-sort-imports:
      glob: "*.py"
      run: >
        ./scripts/fail-if-files-change.bash
        ruff check --select I --fix-only {files}

fix-lint:
  files: |
    echo "Error: Only use this with --files-from-stdin or --all-files" >&2
    exit 1
  commands:
    deadnix:
      glob: "*.nix"
      run: >
        ./scripts/fail-if-files-change.bash
        deadnix --quiet --edit {files}
    ruff:
      glob: "*.py"
      run: >
        ./scripts/fail-if-files-change.bash
        ruff check --fix-only {files}
    statix:
      glob: "*.nix"
      # statix doesn't support passing multiple files yet:
      # https://github.com/nerdypepper/statix/issues/69
      run: >
        ./scripts/fail-if-files-change.bash
        parallel statix fix ::: {files}
    markdownlint-cli2:
      glob: "*.md"
      run: >
        ./scripts/fail-if-files-change.bash
        markdownlint-cli2 --fix {files}
    go-mod-tidy:
      glob: "*gozip/go.{mod,sum}"
      # The '# {files}' is there because lefthook only applies the glob if you
      # have a 'files' command or you use {files} in your run command:
      # https://github.com/evilmartians/lefthook/blob/6858ccbc8226051a71a51c30a57f0d36a9b7ea67/docs/configuration.md#glob
      run: |
        set -o errexit
        cd ./flake-modules/bundler/gozip
        ./scripts/fail-if-files-change.bash go mod tidy # {files}
    typos:
      glob: "*.{sh,bash,fish,go,ini,js,json,lua,nix,py,toml,yaml,yml,zsh}"
      run: >
        ./scripts/fail-if-files-change.bash
        typos --write-changes --format silent {files}
    # TODO: This always writes to the file, even if no changes are made. This
    # causes unnecessary direnv reloads.
    dos2unix:
      exclude:
        # It modified this file, but I'm not confident that won't break anything.
        - "dotfiles/keyboard/US keyboard - no accent keys.bundle/Contents/Resources/en.lproj/InfoPlist.strings"
        # This file is generated
        - "dotfiles/cosmic/v1-shortcuts"
      run: >
        ./scripts/fail-if-files-change.bash
        dos2unix --allow-chown --add-eol {files}
    # TODO: This always writes to the file, even if no changes are made. This
    # causes unnecessary direnv reloads.
    mac2unix:
      exclude:
        # It modified this file, but I'm not confident that won't break anything.
        - "dotfiles/keyboard/US keyboard - no accent keys.bundle/Contents/Resources/en.lproj/InfoPlist.strings"
        # This file is generated
        - "dotfiles/cosmic/v1-shortcuts"
      run: >
        ./scripts/fail-if-files-change.bash
        mac2unix --allow-chown --add-eol {files}
    flake-lock:
      glob: "flake.nix"
      run: >
        ./scripts/fail-if-files-change.bash
        nix flake lock

check-lint:
  files: |
    echo "Error: Only use this with --files-from-stdin or --all-files" >&2
    exit 1
  parallel: true
  commands:
    ltex-cli:
      # TODO: The cli isn't respecting my dictionary or ignore files so I can't use it.
      # https://github.com/valentjn/ltex-ls/issues/283
      skip: true
      glob: "*.md"
      run: >
        ./scripts/run-through-reviewdog.bash
        -name=ltex-cli -efm '%f:%l:%c: %m'
        :::
        ltex-cli --server-command-line=ltex-ls {files}
    golangci-lint:
      # TODO: Don't want to address these issues yet
      skip: true
      glob: "*.go"
      run: >
        ./scripts/run-through-reviewdog.bash
        -name=golangci-lint -f sarif
        :::
        golangci-lint run --out-format sarif {files}
    ruff:
      glob: "*.py"
      run: >
        ./scripts/run-through-reviewdog.bash
        -name=ruff -f sarif
        :::
        ruff check --output-format sarif {files}
    fish:
      glob: "*.fish"
      # TODO: Fish doesn't support passing multiple files, I should open an issue.
      run: >
        ./scripts/run-through-reviewdog.bash
        -name=fish -efm '%f (line %l): %m'
        :::
        parallel fish --no-execute '{}' ::: {files}
    desktop-file-validate:
      glob: "*.desktop"
      run: >
        ./scripts/run-through-reviewdog.bash
        -name=desktop-file-validate -efm '%f: %m'
        :::
        desktop-file-validate {files}
    markdownlint-cli2:
      glob: "*.md"
      run: >
        ./scripts/run-through-reviewdog.bash
        -name=markdownlint-cli2
        -efm "%f:%l:%c: %m"
        -efm "%f:%l:%c %m"
        -efm "%f:%l: %m"
        -efm "%f:%l %m"
        :::
        markdownlint-cli2 {files}
    shellcheck:
      glob: "*.{sh,bash}"
      run: >
        ./scripts/run-through-reviewdog.bash
        -name=shellcheck -f checkstyle
        :::
        shellcheck --format checkstyle --color=never {files}
    yamllint:
      glob: "*.{yaml,yml}"
      run: >
        ./scripts/run-through-reviewdog.bash
        -name=yamllint -efm '%f:%l:%c: [%t%*[a-z]] %m'
        :::
        yamllint --strict --format parsable {files}
    actionlint:
      glob: ".github/workflows/*.{yaml,yml}"
      run: >
        ./scripts/run-through-reviewdog.bash
        -name=actionlint -efm "%f:%l:%c: %m"
        :::
        actionlint -no-color {files}
    statix:
      glob: "*.nix"
      # statix doesn't support passing multiple files yet:
      # https://github.com/nerdypepper/statix/issues/69
      run: >
        ./scripts/run-through-reviewdog.bash
        -name=statix -efm '%f>%l:%c:%t:%n:%m'
        :::
        parallel statix check {} -o errfmt ::: {files}
    typos:
      glob: "*.{sh,bash,fish,go,ini,js,json,lua,nix,py,toml,yaml,yml,zsh}"
      run: >
        ./scripts/run-through-reviewdog.bash
        -name=typos -efm '%f:%l:%c: %m'
        :::
        typos --color never --format brief {files}

    # TODO: These tools don't output a format that reviewdog can parse, I should
    # open issues with all of them. In the meantime, I put reviewdog in tee mode
    # so it will just output whatever the tool outputs. Though this means these
    # errors won't show up as comments on the code in a PR, you'll have to check
    # the console.
    config-file-validator:
      glob: "*.{editorconfig,json,ini}"
      # VS Code's configuration files aren't actually JSON files, they're JSONC.
      exclude: ["*.vscode/*.json"]
      # TODO: SARIF support is being added:
      # https://github.com/Boeing/config-file-validator/issues/32
      run: >
        ./scripts/run-through-reviewdog.bash
        -name=config-file-validator -efm "_REVIEWDOG_DO_NOT_MATCH" -tee
        :::
        validator -groupby pass-fail {files}
    renovate:
      glob: ".github/renovate.json5"
      run: >
        ./scripts/run-through-reviewdog.bash
        -name=renovate -efm "_REVIEWDOG_DO_NOT_MATCH" -tee
        :::
        renovate-config-validator --strict {files}
    taplo:
      glob: "*.toml"
      # This is a generated file
      exclude: [flake-modules/bundler/gozip/gomod2nix.toml]
      # Support for GitHub annotation format is being considered. This could be
      # parsed by reviewdog: https://github.com/tamasfe/taplo/issues/470
      run: >
        ./scripts/run-through-reviewdog.bash
        -name=taplo -efm "_REVIEWDOG_DO_NOT_MATCH" -tee
        :::
        taplo lint {files}

    # Local-Only checks
    commit-message-typos:
      skip:
        # Don't run in CI since I don't this check to be required. It shouldn't
        # be because there is no easy way to ignore false positives in a commit
        # message e.g. "no qa".
        - run: >
            [ "$CI" = true ]
      run: |
        bash -o pipefail -euc '
          while read -r commit; do
            echo "Checking commit $commit ($(git show --no-patch --format=%s "$commit"))..."
            echo "----------------------------------------"
            if ! git show -s --format=%B "$commit" | typos --color never --format brief --no-check-filenames - | ./scripts/reviewdog.bash -name=typos -efm "%f:%l:%c: %m"; then
              found_problem=1
            fi
            echo
          done < <(git rev-list --abbrev-commit --ancestry-path "${GIT_REMOTE:-origin}/${GIT_REF:-HEAD}"..HEAD)
          [[ -z "${found_problem:-}" ]]
        '
    nix-config:
      skip:
        - run: '[ "$CI" = true ]'
      glob: "{flake-modules/**,flake.{lock,nix}}"
      run: nix config check
