# yaml-language-server: $schema=https://json.schemastore.org/lefthook.json

# By default lefthook uses true colors (e.g. #FFFFFF), but they may not be
# readable depending on the terminal background color. Instead I'm using ANSI
# colors since they come from the terminal's color palette.
# TODO: They should change this.
colors:
  cyan: 6
  gray: 8
  green: 2
  red: 1
  yellow: 3

output:
  - execution_info

pre-push:
  commands:
    check:
      # TODO: {push_files} will always be the diff between the current branch and
      # main, but you may be merging into another branch like develop. When this
      # issue is resolved[1] I should explicitly set the branch.
      #
      # [1]: https://github.com/evilmartians/lefthook/issues/785
      run: printf '%s\0' {push_files} | lefthook run check --files-from-stdin

post-merge:
  commands:
    mark-sync-point:
      run: |
        printf ORIG_HEAD >.git/sync-point-1.txt
        printf HEAD >.git/sync-point-2.txt

post-rewrite:
  commands:
    mark-sync-point:
      only: rebase
      run: |
        printf ORIG_HEAD >.git/sync-point-1.txt
        printf HEAD >.git/sync-point-2.txt

post-checkout:
  commands:
    mark-sync-point:
      # TODO: Open an issue for passing the git hook arguments to the only/skip
      # commands, or add new skip/only conditions e.g. 'file' and 'branch'. Then
      # I could remove this conditional.
      run: |
        # Ensure this isn't a file checkout.
        if [ {3} != '0' ]; then
          printf {1} >.git/sync-point-1.txt
          printf {2} >.git/sync-point-2.txt
        fi

sync:
  # So we can see the output of the direnv and system tasks. They can take a while so
  # if their output doesn't show it looks like the task is hanging.
  follow: true
  files: |
    if [ -f .git/sync-point-1.txt -a -f .git/sync-point-2.txt ]; then
      git diff-tree -r --name-only --no-commit-id \
        "$(cat .git/sync-point-1.txt)" "$(cat .git/sync-point-2.txt)"
    fi
  commands:
    direnv:
      glob: ".envrc"
      run: direnv reload
    nix-direnv:
      # The scripts directory is included so script dependencies can be recalculated
      # and loaded in the dev shell.
      glob: "{.envrc,flake.{nix,lock},nix/*,scripts/*}"
      run: touch flake.nix && nix-direnv-reload |& nom
    lefthook:
      # TODO: Currently, this is only needed on the first sync that's done after
      # cloning the repo. This is because lefthook syncs hooks automatically. There's
      # an issue for disabling this behavior[1]. I want it disabled because I don't
      # always want to run the hooks of another branch. For example, when I create a
      # new hook and want to test it on another branch, but then it installs the
      # hooks of the other branch.
      #
      # [1]: https://github.com/evilmartians/lefthook/issues/840
      glob: ".lefthook.yml"
      run: lefthook install --force
    system:
      interactive: true
      glob: "{{dotfiles,flake-modules}/*,flake.{lock,nix}}"
      # sudo policy on Pop!_OS won't let me use --preserve-env=PATH
      run: sudo -- "$(which run-as-admin)" --path "$PATH" "$(which system-config-apply)"
    hammerspoon-annotations:
      run: |
        bash -o pipefail -euc '
          hammerspoon_annotations="$HOME/.hammerspoon/Spoons/EmmyLua.spoon/annotations"
          destination='.lua-libraries/hammerspoon-annotations'
          if [[ -e $hammerspoon_annotations && ! -e $destination ]]; then
            mkdir --parents "$(dirname "$destination")"
            ln --symbolic --force --no-dereference "$hammerspoon_annotations" "$destination"
          fi
        '
    fish:
      glob: "dotfiles/fish/conf.d/*.fish"
      run: fish -c fish-reload

check:
  # This will get all the files that differ from the default branch.
  files: |
    # I'm using merge-base in case the current branch is behind the default branch.
    git diff --diff-filter=d --name-only "$(git merge-base origin/HEAD HEAD)"
    # Untracked files
    git ls-files --others --exclude-standard
  commands:
    generate:
      priority: 1
      run: |
        # This won't be necessary when lefthook gets support for nested groups:
        # https://github.com/evilmartians/lefthook/issues/132
        if [ "$CI" = true ]; then
          ci_flags=(--no-tty)
        else
          ci_flags=()
        fi
        printf '%s\0' {files} | lefthook run generate --files-from-stdin "${ci_flags[@]}"
    fix-lint:
      priority: 2
      run: |
        # This won't be necessary when lefthook gets support for nested groups:
        # https://github.com/evilmartians/lefthook/issues/132
        if [ "$CI" = true ]; then
          ci_flags=(--no-tty)
        else
          ci_flags=()
        fi
        printf '%s\0' {files} | lefthook run fix-lint --files-from-stdin "${ci_flags[@]}"
    # Run formatting after lint fixes because sometimes a lint fix produces code
    # that doesn't comply with the formatting.
    format:
      priority: 3
      run: |
        # This won't be necessary when lefthook gets support for nested groups:
        # https://github.com/evilmartians/lefthook/issues/132
        if [ "$CI" = true ]; then
          ci_flags=(--no-tty)
        else
          ci_flags=()
        fi
        printf '%s\0' {files} | lefthook run format --files-from-stdin "${ci_flags[@]}"
    check-lint:
      priority: 4
      run: |
        # This won't be necessary when lefthook gets support for nested groups:
        # https://github.com/evilmartians/lefthook/issues/132
        if [ "$CI" = true ]; then
          ci_flags=(--no-tty)
        else
          ci_flags=()
        fi
        printf '%s\0' {files} | lefthook run check-lint --files-from-stdin "${ci_flags[@]}"
    test:
      priority: 5
      run: |
        # This won't be necessary when lefthook gets support for nested groups:
        # https://github.com/evilmartians/lefthook/issues/132
        if [ "$CI" = true ]; then
          ci_flags=(--no-tty)
        else
          ci_flags=()
        fi
        printf '%s\0' {files} | lefthook run test --files-from-stdin "${ci_flags[@]}"

test:
  files: |
    echo "Error: Only use this with --files-from-stdin or --all-files" >&2
    exit 1
  parallel: true
  commands:
    flake:
      skip:
        # This would take a long time to run in GitHub Actions since it would have to
        # download all the dependencies. Instead Garnix will run these checks.
        - run: '[ "$CI" = true ]'
      run: nix flake check
    nix-config:
      skip:
        - run: '[ "$CI" = true ]'
      glob: "{nix/*,flake.{lock,nix}}"
      run: nix config check

generate:
  files: |
    echo "Error: Only use this with --files-from-stdin or --all-files" >&2
    exit 1
  commands:
    readme-table-of-contents:
      glob: README.md
      run: >
        ./scripts/run-check-with-reviewdog.bash -name=readme-table-of-contents --
        doctoc README.md --github
    neovim-plugin-list:
      glob: "*neovim/lua/*.lua"
      run: >
        ./scripts/run-check-with-reviewdog.bash -name=neovim-plugin-list --
        ./scripts/code-generation/generate-neovim-plugin-list.bash
    gomod2nix:
      glob: "gozip/go.mod"
      run: >
        ./scripts/run-check-with-reviewdog.bash --
        gomod2nix --dir gozip generate
    nix-version:
      glob: "flake.lock"
      run: >
        ./scripts/run-check-with-reviewdog.bash -name=nix-version --
        ./scripts/code-generation/sync-nix-version.bash
    system-configs:
      glob: "{nix/*,flake.nix}"
      run: >
        ./scripts/run-check-with-reviewdog.bash -name=system-configs --
        ./scripts/code-generation/add-system-configurations-to-readme.bash
    flake-lock:
      glob: "flake.nix"
      run: >
        ./scripts/run-check-with-reviewdog.bash -name=flake-lock --
        nix flake lock

format:
  files: |
    echo "Error: Only use this with --files-from-stdin or --all-files" >&2
    exit 1
  commands:
    taplo:
      glob: "*.toml"
      exclude: [gozip/gomod2nix.toml]
      run: >
        ./scripts/run-check-with-reviewdog.bash --
        taplo format {files}
    prettier:
      glob: "*.{md,js,json,json{5,c},yml,yaml}"
      # VS Code formats its settings files automatically when you change a setting
      # through its UI.
      exclude: ["*.vscode/*.json"]
      # TODO: Get prettier to not log unchanged files:
      # https://github.com/prettier/prettier/issues/2611
      run: >
        ./scripts/run-check-with-reviewdog.bash --
        prettier --write {files}
    shfmt:
      glob: "*.{envrc,sh,bash}"
      run: >
        ./scripts/run-check-with-reviewdog.bash --
        shfmt --simplify --binary-next-line --case-indent --indent 2 --write {files}
    fish_indent:
      glob: "*.fish"
      run: >
        ./scripts/run-check-with-reviewdog.bash --
        fish_indent --write {files}
    nixfmt:
      glob: "*.nix"
      # TODO: --verify confirms that the formatted code parses the same as the input
      # code.
      run: >
        ./scripts/run-check-with-reviewdog.bash --
        nixfmt --verify {files}
    just:
      # TODO: just's builtin formatter currently removes/rearranges comments. Until
      # this is fixed I'll disable it: https://github.com/casey/just/issues/862.
      skip: true
      glob: "justfile"
      run: >
        ./scripts/run-check-with-reviewdog.bash --
        just --unstable --fmt --justfile {files}
    stylua:
      glob: "*.lua"
      run: >
        ./scripts/run-check-with-reviewdog.bash --
        stylua {files}
    gofmt:
      glob: "*.go"
      run: >
        ./scripts/run-check-with-reviewdog.bash --
        gofmt -w {files}
    ruff-format:
      glob: "*.py"
      run: >
        ./scripts/run-check-with-reviewdog.bash -name=ruff-format --
        ruff format {files}
    ruff-format-sort-imports:
      glob: "*.py"
      run: >
        ./scripts/run-check-with-reviewdog.bash -name=ruff-format-sort-imports --
        ruff check --select I --fix-only {files}

fix-lint:
  files: |
    echo "Error: Only use this with --files-from-stdin or --all-files" >&2
    exit 1
  commands:
    deadnix:
      glob: "*.nix"
      run: >
        ./scripts/run-check-with-reviewdog.bash --
        deadnix --quiet --edit {files}
    ruff:
      glob: "*.py"
      run: >
        ./scripts/run-check-with-reviewdog.bash --
        ruff check --fix-only {files}
    statix:
      glob: "*.nix"
      # statix doesn't support passing multiple files yet:
      # https://github.com/nerdypepper/statix/issues/69
      run: >
        ./scripts/run-check-with-reviewdog.bash -name=statix --
        parallel statix fix ::: {files}
    markdownlint-cli2:
      glob: "*.md"
      run: >
        ./scripts/run-check-with-reviewdog.bash --
        markdownlint-cli2 --fix {files}
    go-mod-tidy:
      glob: "gozip/go.{mod,sum}"
      # The comment containing '{files}' is there because lefthook only applies the
      # glob if you have a 'files' command or you use {files} in your run command[1].
      # If this command were under the pre-commit and pre-push groups, the glob would
      # get applied, but apparently this behavior was confusing for users so the
      # author doesn't want to use the same behavior for other groups[2].
      #
      # [1]: https://github.com/evilmartians/lefthook/blob/6858ccbc8226051a71a51c30a57f0d36a9b7ea67/docs/configuration.md#glob
      # [2]: https://github.com/evilmartians/lefthook/pull/595#issuecomment-1859784491
      run: >
        ./scripts/run-check-with-reviewdog.bash -name=go-mod-tidy --
        go -C gozip mod tidy # {files}
    typos:
      glob: "*.{sh,bash,fish,go,ini,js,json,lua,nix,py,toml,yaml,yml,zsh}"
      run: >
        ./scripts/run-check-with-reviewdog.bash --
        typos --write-changes --format silent {files}

check-lint:
  files: |
    echo "Error: Only use this with --files-from-stdin or --all-files" >&2
    exit 1
  parallel: true
  commands:
    ltex-cli:
      # TODO: The cli isn't respecting my dictionary or ignore files so I can't use
      # it.
      # https://github.com/valentjn/ltex-ls/issues/283
      skip: true
      glob: "*.md"
      run: >
        ./scripts/run-check-with-reviewdog.bash -efm '%f:%l:%c: %m' --
        ltex-cli --server-command-line=ltex-ls {files}
    golangci-lint:
      # TODO: Don't want to address these issues yet
      skip: true
      glob: "*.go"
      run: >
        ./scripts/run-check-with-reviewdog.bash -f sarif --
        golangci-lint run --out-format sarif {files}
    ruff:
      glob: "*.py"
      run: >
        ./scripts/run-check-with-reviewdog.bash -f sarif --
        ruff check --output-format sarif {files}
    fish:
      glob: "*.fish"
      # TODO: Fish doesn't support passing multiple files, I should open an issue.
      run: >
        ./scripts/run-check-with-reviewdog.bash -name=fish -efm '%f (line %l): %m' --
        parallel fish --no-execute '{}' ::: {files}
    desktop-file-validate:
      glob: "*.desktop"
      run: >
        ./scripts/run-check-with-reviewdog.bash -efm '%f: %m' --
        desktop-file-validate {files}
    markdownlint-cli2:
      glob: "*.md"
      run: >
        ./scripts/run-check-with-reviewdog.bash
        -efm "%f:%l:%c: %m"
        -efm "%f:%l:%c %m"
        -efm "%f:%l: %m"
        -efm "%f:%l %m"
        --
        markdownlint-cli2 {files}
    shellcheck:
      glob: "*.{sh,bash}"
      run: >
        ./scripts/run-check-with-reviewdog.bash -f checkstyle --
        shellcheck --format checkstyle {files}
    yamllint:
      glob: "*.{yaml,yml}"
      run: >
        ./scripts/run-check-with-reviewdog.bash -efm '%f:%l:%c: [%t%*[a-z]] %m' --
        yamllint --strict --format parsable {files}
    actionlint:
      glob: ".github/workflows/*.{yaml,yml}"
      run: >
        ./scripts/run-check-with-reviewdog.bash -efm "%f:%l:%c: %m" --
        actionlint {files}
    statix:
      glob: "*.nix"
      # statix doesn't support passing multiple files yet:
      # https://github.com/nerdypepper/statix/issues/69
      run: >
        ./scripts/run-check-with-reviewdog.bash
        -name=statix -efm '%f>%l:%c:%t:%n:%m' --
        parallel statix check {} -o errfmt ::: {files}
    typos:
      glob: "{.envrc,*.{sh,bash,fish,go,ini,js,json,lua,nix,py,toml,yaml,yml,zsh}}"
      # TODO: Colors should be automatically disabled if stdout isn't a TTY, but
      # that isn't happening.
      run: >
        ./scripts/run-check-with-reviewdog.bash -efm '%f:%l:%c: %m' --
        typos --color never --format brief {files}
    mypy:
      glob: "dotfiles/smart_plug/*.py"
      # The comment containing '{files}' is there because lefthook only applies the
      # glob if you have a 'files' command or you use {files} in your run command[1].
      # If this command were under the pre-commit and pre-push groups, the glob would
      # get applied, but apparently this behavior was confusing for users so the
      # author doesn't want to use the same behavior for other groups[2].
      #
      # [1]: https://github.com/evilmartians/lefthook/blob/6858ccbc8226051a71a51c30a57f0d36a9b7ea67/docs/configuration.md#glob
      # [2]: https://github.com/evilmartians/lefthook/pull/595#issuecomment-1859784491
      run: >
        ./scripts/run-check-with-reviewdog.bash -f mypy --
        mypy dotfiles/smart_plug # {files}
    isutf8:
      exclude:
        # Apparently, this file isn't valid UTF-8, but macOS generated it so I won't
        # change it.
        - dotfiles/keyboard/US keyboard - no accent keys.bundle/Contents/Resources/U.S. copy.icns
      run: >
        ./scripts/run-check-with-reviewdog.bash -efm '%f: %m' --
        isutf8 {files}
    editorconfig-checker:
      # I'm disabling the indentation size check because it applies to comments as
      # well and I don't want it to. I could add inline directives to disable it for
      # comments, but that would be cumbersome.
      run: >
        ./scripts/run-check-with-reviewdog.bash -efm '%f:%l:%c: %m' --
        editorconfig-checker -no-color -format gcc --disable-indent-size {files}
    # TODO: It supports SARIF, but it prints output for files that succeed. I should
    # ask if an option can be added to omit files that don't have issues.
    config-file-validator:
      glob: "*.{editorconfig,json,ini}"
      # VS Code's configuration files end in .json, but they're actually jsonc files.
      exclude: ["*.vscode/*.json"]
      run: >
        ./scripts/run-check-with-reviewdog.bash
        -name=config-file-validator
        -efm '%A    × %f'
        -efm '%Z        error: Error at line %l column %c: %m'
        -efm '%A    × %f'
        -efm '%Z        error: %m'
        --
        validator -groupby pass-fail {files}
    commit-message-typos:
      skip:
        # Don't run in CI since this check isn't required. It isn't required because
        # there's no easy way to ignore false positives in a commit message e.g. "no
        # qa".
        - run: >
            [ "$CI" = true ]
      run: |
        bash -o pipefail -euc '
          base_ref="${GIT_REMOTE:-origin}/${GIT_REF:-HEAD}"
          readarray -t commits_to_check \
            < <(git rev-list --abbrev-commit --ancestry-path "$base_ref"..HEAD)
          found_problem=
          for commit in "${commits_to_check[@]}"; do
            commit_message_subject="$(git show --no-patch --format=%s "$commit")"
            echo "Checking commit $commit ($commit_message_subject)..."
            echo '─────────────────────────────────────────'

            commit_full_message="$(git show --no-patch --format=%B "$commit")"
            if ! echo "$commit_full_message" | typos --format brief -; then
              found_problem=1
            fi
            echo
          done
          [[ ! "$found_problem" ]]
        '
    # TODO: These tools don't output a format that reviewdog can parse, I should open
    # issues with all of them. In the meantime, I put reviewdog in tee mode so it
    # will just output whatever the tool outputs. Though this means these errors
    # won't show up in the pull request UI so you'd have to check the console.
    renovate-config-validator:
      glob: ".github/{renovate,renovate-global}.json5"
      run: >
        ./scripts/run-check-with-reviewdog.bash
        -efm "_REVIEWDOG_DO_NOT_MATCH" -tee --
        renovate-config-validator --strict {files}
    taplo:
      glob: "*.toml"
      # This is a generated file
      exclude: [gozip/gomod2nix.toml]
      # Support for GitHub annotation format is being considered. This could be
      # parsed by reviewdog: https://github.com/tamasfe/taplo/issues/470
      run: >
        ./scripts/run-check-with-reviewdog.bash
        -efm "_REVIEWDOG_DO_NOT_MATCH" -tee --
        taplo lint {files}
