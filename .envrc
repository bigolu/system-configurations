# shellcheck shell=bash

# This script sets up the local development and CI environments.
#
# Environment Variables
#   DEV_SHELL:
#     The name of the flake devShell to load. The default value is "local".
#   CI:
#     When set to "true", the environment will be set up for CI. Otherwise, the local
#     development environment will be set up. Most CI systems, e.g. GitHub Actions,
#     set this variable.

function main {
  if is_running_locally; then
    if ! is_first_direnv_load; then
      print_reminder_to_reload_direnv_in_editor
    fi

    # They get pretty noisy
    hide_logs
  fi

  dotenv_if_exists secrets.env
  set_up_nix

  # Sets GOPATH and GOBIN and adds GOBIN to the PATH
  layout go
}

function hide_logs {
  export DIRENV_LOG_FORMAT=''
}

function set_up_nix {
  set_nix_config
  load_dev_shell
}

function set_nix_config {
  set_nix_config_option 'extra-substituters' \
    'https://bigolu.cachix.org' \
    'https://nix-community.cachix.org'

  set_nix_config_option 'extra-trusted-public-keys' \
    'bigolu.cachix.org-1:AJELdgYsv4CX7rJkuGu5HuVaOHcqlOgR07ZJfihVTIw=' \
    'nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs='

  if is_running_in_ci; then
    # Double the default size (64MiB -> 124MiB) since I kept hitting it
    set_nix_config_option 'download-buffer-size' '134217728'
    set_nix_config_option 'show-trace' 'true'
  fi
}

function load_dev_shell {
  source_url \
    'https://raw.githubusercontent.com/nix-community/nix-direnv/3.0.6/direnvrc' \
    'sha256-RYcUJaRMf8oF5LznDrlCXbkOQrywm0HDv1VjYGaJGdM='

  if is_running_locally; then
    # The flake evaluation cache for a devShell seems to be invalidated by any change
    # to the repo. Since evaluation is pretty slow, I'll manually reload the
    # devShell.
    nix_direnv_manual_reload
  fi

  use flake ".#${DEV_SHELL:-local}"
}

function print_reminder_to_reload_direnv_in_editor {
  log_status 'tip: Remember to reload direnv inside your editor as well.'
}

function set_nix_config_option {
  local -r name="$1"
  local -ra values=("${@:2}")

  local -r joined_values="$(join ' ' "${values[@]}")"

  if [[ -z ${NIX_CONFIG+set} ]]; then
    export NIX_CONFIG=''
  fi

  if [[ -n $NIX_CONFIG ]] && ! ends_with_newline "$NIX_CONFIG"; then
    NIX_CONFIG+=$'\n'
  fi

  export NIX_CONFIG+="$name = $joined_values"
}

function ends_with_newline {
  # The ' ' before '-1' is necessary, otherwise Bash would treat ':-' as the
  # default-value operator.
  [[ ${1: -1} == $'\n' ]]
}

function is_first_direnv_load {
  # This variable gets set by direnv so it won't be set on the first load.
  [[ -z ${DIRENV_DIFF+set} ]]
}

function is_running_in_ci {
  [[ ${CI:-} == 'true' ]]
}

function is_running_locally {
  ! is_running_in_ci
}

# Use the first argument (delimiter) to join the rest (values).
# Example: join a 1 2 3 -> '1a2a3'
function join {
  local -r delimiter="$1"
  local -ra values=("${@:2}")

  local joined_values=''
  local -r value_count="${#values[@]}"
  for index in "${!values[@]}"; do
    joined_values+="${values[$index]}"

    # is not last value
    if ((index < (value_count - 1))); then
      joined_values+="$delimiter"
    fi
  done

  echo "$joined_values"
}

main
