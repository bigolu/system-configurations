# shellcheck shell=bash

# Dependencies
#
# WARNING: Renovate uses a regular expression to find these dependencies
# and update them. To ensure the regular expression find a match, the lines
# declaring the dependencies should not be changed in any way. For example,
# splitting the command to multiple lines using '\'.
source_url 'https://raw.githubusercontent.com/nix-community/nix-direnv/3.0.5/direnvrc' 'sha256-RuwIS+QKFj/T9M2TFXScjBsLR6V3A17YVoEW/Q6AZ1w='

function set_up_environment {
  # Nix has the dependencies so load it first in case other setup tasks depend on them.
  set_up_nix

  layout go
  set_up_secrets
}

function set_up_nix {
  nix_wrapper_path="$(dirname "$(which nix)")"

  nix_direnv_manual_reload
  use flake .#
  shopt -s globstar # so the following glob works
  watch_file flake-modules/**/*.nix
  add_lines_to_nix_config \
    'extra-substituters = https://bigolu.cachix.org' \
    'extra-trusted-public-keys = bigolu.cachix.org-1:AJELdgYsv4CX7rJkuGu5HuVaOHcqlOgR07ZJfihVTIw='

  # I want to use my nix wrapper so I need to prepend it to the PATH after the
  # flake bin is added. I first try to remove it from the PATH so there are not
  # duplicates.
  PATH_rm "$nix_wrapper_path"
  PATH_add "$nix_wrapper_path"
}

function set_up_secrets {
  if github="$(get_secret 'github.txt')"; then
    # To avoid being rate-limited by GitHub during `nix flake update`
    add_lines_to_nix_config "extra-access-tokens = github.com=$github"

    # For lychee
    export GITHUB_TOKEN="$github"
  fi

  if bws="$(get_secret 'bws.txt')"; then
    export BWS_ACCESS_TOKEN="$bws"
  fi

  readarray -d '' secret_files \
    < <(find "$PWD/secrets" -type f \! -name .DS_Store -print0)
  watch_file "${secret_files[@]}"
}

function get_secret {
  path="./secrets/$1"
  if [ -f "$path" ]; then
    cat "$path"
  else
    if [ -t 2 ]; then
      yellow='\e[33m'
      reset='\e[m'
      echo -e "[${yellow}warning${reset}] secret '$path' was not found, run 'just get-secrets' to get all of the secrets." 1>&2
    fi
    return 1
  fi
}

function add_lines_to_nix_config {
  for line in "$@"; do
    NIX_CONFIG="${NIX_CONFIG:-}"$'\n'"$line"
  done
  export NIX_CONFIG
}

set_up_environment
