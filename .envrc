# shellcheck shell=bash

# Don't show any logs, it gets pretty noisy.
if [[ -t 1 ]]; then
  export DIRENV_LOG_FORMAT=''
fi

# Dependencies
#
# WARNING: Renovate uses a regular expression to find these dependencies
# and update them. To ensure the regular expression finds a match, the lines
# declaring the dependencies should not be changed in any way. For example,
# splitting the command to multiple lines using '\'.
source_url 'https://raw.githubusercontent.com/nix-community/nix-direnv/3.0.6/direnvrc' 'sha256-RYcUJaRMf8oF5LznDrlCXbkOQrywm0HDv1VjYGaJGdM='

function set_up_environment {
  # The first time direnv is loaded, Nix won't add any packages to the PATH,
  # since that requires a manual call to nix_direnv_reload. As such, don't try
  # to use a program from a Nix package in this configuration.
  set_up_nix

  # This has to be done after setting up Nix since Nix adds the programs being
  # wrapped to the PATH.
  add_wrappers_to_path

  layout go
}

function set_up_nix {
  # SYNC: SYS_CONF_SUBS
  add_lines_to_nix_config \
    'extra-substituters = https://bigolu.cachix.org https://nix-community.cachix.org'

  # Reasons I don't want it to automatically reload:
  #   - It runs whenever a watched file's modification time changes, even if the
  #     contents are the same.
  #   - It runs on checkout and interactive rebase
  nix_direnv_manual_reload
  use flake .#
}

function add_wrappers_to_path {
  add_nix_wrapper_to_path
  add_gh_wrapper_to_path
}

function add_nix_wrapper_to_path {
  local nix_wrapper_path="$HOME/.local/bin"

  # I first try to remove it from the PATH so there are no duplicates.
  PATH_rm "$nix_wrapper_path"

  PATH_add "$nix_wrapper_path"
}

function add_gh_wrapper_to_path {
  dir="$(direnv_layout_dir)/wrappers"
  mkdir -p "$dir"

  symlink "$PWD/scripts/gh.bash" "$dir/gh"

  PATH_add "$dir"
}

function symlink {
  source="$1"
  destination="$2"

  # With the latest version of ln, you could just use:
  # `ln --symbolic --no-dereference --force <source> <destination>`
  # but since we only have access to the programs on the host machine,
  # we'll try to use something that's supported by most versions.
  if [ -L "$destination" ]; then
    rm "$destination"
  fi
  ln -s "$source" "$destination"
}

function add_lines_to_nix_config {
  for line in "$@"; do
    NIX_CONFIG="${NIX_CONFIG:-}"$'\n'"$line"
  done
  export NIX_CONFIG
}

set_up_environment
