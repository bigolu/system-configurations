# yaml-language-server: $schema=https://raw.githubusercontent.com/evilmartians/lefthook/master/schema.json

# TODO: Lefthook sets its colors based on the background color of the terminal to
# ensure good contrast[1], but it doesn't seem to be working for me so I'm using ANSI
# colors instead. I should report this.
#
# [1]: https://github.com/evilmartians/lefthook/pull/482
colors:
  cyan: 6
  gray: 8
  green: 2
  red: 1
  yellow: 3

output:
  # Print a header for each job
  - execution_info

templates:
  run_fix: mise run lefthook:run-fix

# Git Hooks
# -----------------------------------------------------------------------------------
# Do not specify globs for any jobs that belong to a git hook because they
# won't be applied unless their run command uses `{files}`. You could get around this
# by adding something like `: {files};` to the beginning of every run command, but
# that would lead to a subtle bug if you ever forgot to add it. For custom hooks, I
# get around this by always specifying a `files` command at the hook level since per
# the documentation[1], globs will always be applied if a `files` command is used.
# This does not seem to apply to git hooks though and I think that's a bug. I should
# report it. There was a pull request for always applying globs, but it was
# closed[2].
#
# [1]: https://lefthook.dev/configuration/glob.html
# [2]: https://github.com/evilmartians/lefthook/pull/595

commit-msg:
  jobs:
    - name: commit-msg-typos-check
      run: typos {1}

# Lefthook stashes unstaged changes before running this hook, but not untracked
# files: https://github.com/evilmartians/lefthook/issues/833
pre-commit:
  jobs:
    - name: pre-commit-check
      run: |
        printf '%s\0' {staged_files} |
          # This removes the final character, which is the null byte '\0'. This is
          # necessary because lefthook expects the file names to be separated by a
          # '\0' so a trailing one would result in an empty string being passed in as
          # a file name.
          head -c -1 |
          lefthook run check --files-from-stdin

post-merge:
  jobs:
    - name: mark-sync-point
      run: |
        printf ORIG_HEAD >.git/sync-point-1.txt
        printf HEAD >.git/sync-point-2.txt

post-rewrite:
  jobs:
    - name: mark-sync-point
      only: rebase
      run: |
        printf ORIG_HEAD >.git/sync-point-1.txt
        printf HEAD >.git/sync-point-2.txt

post-checkout:
  jobs:
    - name: mark-sync-point
      # TODO: Open an issue for passing the git hook arguments to the only/skip
      # commands, or add new skip/only conditions e.g. 'file' and 'branch'. Then
      # I could remove this conditional.
      run: |
        # Ensure this isn't a file checkout.
        if [ {3} != '0' ]; then
          printf {1} >.git/sync-point-1.txt
          printf {2} >.git/sync-point-2.txt
        fi

# Custom Hooks
# -----------------------------------------------------------------------------------
# Lefthook only applies a job's glob if it, or the hook it belongs to, has a 'files'
# command or you use the {files} placeholder in the run command[1]. Some of the run
# commands below don't use {files} so to ensure that globs are always applied, I add
# a 'files' command to the hook. There was a pull request for always applying globs,
# but it was closed[2].
#
# [1]: https://lefthook.dev/configuration/glob.html
# [2]: https://github.com/evilmartians/lefthook/pull/595

sync:
  # So we can see the output of the direnv and system tasks. They can take a
  # while so it's nice to see their progress.
  follow: true
  # Custom hooks should always have a files command. See the comment below the
  # "Custom Hooks" heading for why that is.
  files: |
    if [ -f .git/sync-point-1.txt -a -f .git/sync-point-2.txt ]; then
      git diff-tree -r --name-only --no-commit-id \
        "$(cat .git/sync-point-1.txt)" "$(cat .git/sync-point-2.txt)"
    fi
  jobs:
    - name: direnv
      glob:
        - direnv/base.bash
        - nix/*
        - flake.nix
        - flake.lock
        # This is so task dependencies can be reloaded into the dev shell.
        - mise/tasks/*.bash
      run: mise run lefthook:sync:direnv
    - name: lefthook
      # TODO: Currently, this is only needed on the first sync that's done after
      # cloning the repo. This is because lefthook syncs hooks automatically. There's
      # an issue for disabling this behavior[1]. I want it disabled because I don't
      # always want to run the hooks of another branch. For example, when I create a
      # new hook and want to test it on another branch, but then it installs the
      # hooks of the other branch.
      #
      # [1]: https://github.com/evilmartians/lefthook/issues/840
      glob: "lefthook.yaml"
      run: lefthook install --force
    - name: system
      glob:
        - dotfiles/*
        - nix/*
        - flake.nix
        - flake.lock
      # Needs to be interactive so I can input my password when the path for
      # run-as-admin changes. This is because I specify its path in my sudoers config
      # to allow running it without a password.
      interactive: true
      # sudo policy on Pop!_OS won't let me use --preserve-env=PATH
      run: sudo -- "$(command -v run-as-admin)" --path "$PATH" "$(command -v system-config-apply)"
    - name: fish
      glob: dotfiles/fish/conf.d/*.fish
      run: fish -c fish-reload

check:
  # Custom hooks should always have a files command. See the comment below the
  # "Custom Hooks" heading for why that is.
  files: ":"
  jobs:
    - name: _
      # Don't run checks on files I didn't make. For example, generated files and
      # licenses.
      #
      # This job only exists so the excludes can get inherited by all of its
      # descendants. There's an open feature request for a global exclude list[1]. If
      # that gets implemented, I won't need this extra job anymore.
      #
      # [1]: https://github.com/evilmartians/lefthook/issues/593
      exclude:
        - gozip/gomod2nix.toml
        - ".vscode/*.json"
        - dotfiles/keyboard/US keyboard - no accent keys.bundle/*
        - dotfiles/cosmic/config/*
        - docs/tasks.html
        - COPYING.txt
      group:
        jobs:
          - name: generate
            group:
              jobs:
                - name: readme-table-of-contents
                  glob: README.md
                  run: "{run_fix} doctoc README.md --github"
                - name: readme-nix-version
                  glob: flake.lock
                  run: "{run_fix} mise run lefthook:check:generate:add-nix-version-to-readme"
                - name: readme-config-names
                  glob: "*.nix"
                  run: "{run_fix} mise run lefthook:check:generate:add-config-names-to-readme"
                - name: readme-nixpkgs-commit
                  glob: flake.lock
                  run: "{run_fix} mise run lefthook:check:generate:add-nixpkgs-commit-to-readme"
                - name: flake-lock
                  glob: flake.nix
                  run: "{run_fix} nix flake lock"
                - name: task-docs
                  glob: mise/*
                  # TODO: markdown2html-converter hasn't been updated in a couple
                  # years. I'd like to switch to markdown-to-html-cli[1], but it
                  # isn't in nixpkgs. Maybe I can add it or make a request.
                  # [1]: https://github.com/jaywcjlove/markdown-to-html-cli
                  run: |
                    # markdown2html-converter only accepts files that end in .md so I
                    # can't use process substitution
                    temp="$(mktemp --suffix '.md')"
                    mise generate task-docs --style detailed --output "$temp"
                    {run_fix} markdown2html-converter \
                      --force \
                      --title 'Tasks' \
                      --html-path docs/tasks.html "$temp"
                - name: mergiraf
                  glob: flake.lock
                  run: "{run_fix} mise run lefthook:check:generate:mergiraf"
          - name: fix-lint
            group:
              jobs:
                - name: deadnix
                  glob: "*.nix"
                  run: "{run_fix} deadnix --quiet --edit {files}"
                - name: ruff
                  glob: "*.py"
                  run: "{run_fix} ruff check --fix-only {files}"
                - name: statix
                  glob: "*.nix"
                  # statix doesn't support passing multiple files yet:
                  # https://github.com/oppiliappan/statix/issues/69
                  run: "{run_fix} parallel statix fix -- {files}"
                - name: markdownlint-cli2
                  glob: "*.md"
                  run: "{run_fix} markdownlint-cli2 --fix {files}"
                - name: go-mod-tidy
                  glob: gozip/go.{mod,sum}
                  run: "{run_fix} go -C gozip mod tidy"
                - name: golangci-lint
                  glob: "*.go"
                  root: "gozip/"
                  run: "{run_fix} golangci-lint run --fix"
                - name: typos
                  run: "{run_fix} typos --write-changes --format silent {files}"
          # Run formatting after lint fixes because sometimes a lint fix produces
          # code that doesn't comply with the formatting.
          - name: format
            group:
              jobs:
                - name: taplo
                  glob: "*.toml"
                  run: "{run_fix} taplo format {files}"
                - name: prettier
                  glob: "*.{md,js,json,json{5,c},yaml}"
                  run: "{run_fix} prettier --write {files}"
                - name: shfmt
                  glob: "*.{sh,bash}"
                  run: "{run_fix} shfmt --simplify --case-indent --indent 2 --write {files}"
                - name: fish_indent
                  glob: "*.fish"
                  run: "{run_fix} fish_indent --write {files}"
                - name: nixfmt
                  glob: "*.nix"
                  # --verify confirms that the formatted code parses the same as the
                  # input code.
                  run: "{run_fix} nixfmt --verify {files}"
                - name: stylua
                  glob: "*.lua"
                  run: "{run_fix} stylua {files}"
                - name: gofmt
                  glob: "*.go"
                  run: "{run_fix} gofmt -w {files}"
                - name: ruff-format
                  glob: "*.py"
                  run: "{run_fix} ruff format {files}"
                - name: ruff-format-sort-imports
                  glob: "*.py"
                  run: "{run_fix} ruff check --select I --fix-only {files}"
          # I'm putting the check-lint and test groups in their own group so I can
          # run them in parallel. It's safe to do so because they don't modify any
          # files.
          - name: _
            group:
              parallel: true
              jobs:
                - name: check-lint
                  group:
                    parallel: true
                    jobs:
                      - name: golangci-lint
                        glob: "*.go"
                        root: "gozip/"
                        run: golangci-lint run
                      - name: gopls
                        glob: "*.go"
                        run: |
                          check() {
                            # TODO: gopls should have an option for failing if an
                            # error was found.
                            issues="$(gopls check "$@")"
                            if [ -n "$issues" ]; then
                              echo "$issues"
                              exit 1
                            fi
                          }
                          # I use a function because lefthook is assuming that the
                          # {files} placeholder is not inside a string. So its
                          # escaping may not work otherwise.
                          check {files}
                      - name: ruff
                        glob: "*.py"
                        run: ruff check {files}
                      - name: fish
                        glob: "*.fish"
                        # TODO: Fish doesn't support passing multiple files, I should
                        # open an issue.
                        run: "parallel fish --no-execute -- {files}"
                      - name: desktop-file-validate
                        glob: "*.desktop"
                        run: desktop-file-validate {files}
                      - name: markdownlint-cli2
                        glob: "*.md"
                        run: markdownlint-cli2 {files}
                      - name: shellcheck
                        glob: "*.{sh,bash}"
                        run: shellcheck {files}
                      - name: actionlint
                        glob: ".github/workflows/*.yaml"
                        run: actionlint {files}
                      - name: statix
                        glob: "*.nix"
                        # statix doesn't support passing multiple files yet:
                        # https://github.com/oppiliappan/statix/issues/69
                        run: "parallel statix check -- {files}"
                      - name: nixpkgs-lint
                        glob: "*.nix"
                        run: nixpkgs-lint --include-unfinished-lints -- {files}
                      - name: typos
                        run: typos {files}
                      - name: mypy
                        glob: "*.py"
                        run: mypy {files}
                      - name: isutf8
                        run: isutf8 {files}
                      - name: editorconfig-checker
                        # I'm disabling the indentation size check because it applies
                        # to comments as well and I don't want it to.
                        run: editorconfig-checker --disable-indent-size {files}
                      - name: config-file-validator
                        glob: "*.{editorconfig,json,ini,yaml,toml}"
                        run: validator -groupby pass-fail {files}
                      - name: renovate-config-validator
                        glob:
                          - renovate.json5
                          - renovate/*.json5
                        run: renovate-config-validator --strict {files}
                      - name: lua-ls
                        glob: dotfiles/neovim/*.lua
                        run: |
                          # --configpath is relative to the directory being checked
                          # so I'm using an absolute path instead.
                          lua-language-server \
                            --logpath "${direnv_layout_dir:-.direnv}/lua-ls-logs" \
                            --check ./dotfiles/neovim \
                            --configpath "$PWD/.luarc.json"
                - name: test
                  group:
                    parallel: true
                    jobs:
                      - name: flake
                        glob:
                          - flake.nix
                          - flake.lock
                          - nix/*
                          - dotfiles/*
                          - gozip/*
                        run: nix flake check
                      - name: nix-config
                        glob:
                          - "*.nix"
                          - flake.lock
                        run: nix config check
          - name: lychee
            # Lychee, a link checker, will be run periodically in CI. To ensure it
            # doesn't run anywhere else, I only set LEFTHOOK_ENABLE_LYCHEE to true in
            # the CI workflow for checking links. I'd prefer to move this check to a
            # separate hook instead of disabling/enabling it with an environment
            # variable, but I want it to inherit the excludes that are set in the
            # top-most job for this hook.
            #
            # TODO: There's an open feature request for a global exclude list[1]. If
            # that gets implemented, I can move this to a separate hook.
            #
            # [1]: https://github.com/evilmartians/lefthook/issues/593
            only:
              - run: '[ "$LEFTHOOK_ENABLE_LYCHEE" = true ]'
            exclude:
              - .lycheeignore
            run: mise run lefthook:check:lychee {files}
