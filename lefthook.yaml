# yaml-language-server: $schema=https://raw.githubusercontent.com/evilmartians/lefthook/master/schema.json

# TODO: Lefthook sets its colors based on the background color of the terminal to
# ensure good contrast[1], but it doesn't seem to be working for me so I'm using ANSI
# colors instead. I should report this.
#
# [1]: https://github.com/evilmartians/lefthook/pull/482
colors:
  cyan: 6
  gray: 8
  green: 2
  red: 1
  yellow: 3

# Only show the output of commands that fail. If you want to see more output, just
# comment this out or add more output types.
output:
  - execution_info

pre-push:
  jobs:
    - name: check
      run: printf '%s\0' {push_files} | lefthook run check --files-from-stdin

post-merge:
  jobs:
    - name: mark-sync-point
      run: |
        printf ORIG_HEAD >.git/sync-point-1.txt
        printf HEAD >.git/sync-point-2.txt

post-rewrite:
  jobs:
    - name: mark-sync-point
      only: rebase
      run: |
        printf ORIG_HEAD >.git/sync-point-1.txt
        printf HEAD >.git/sync-point-2.txt

post-checkout:
  jobs:
    - name: mark-sync-point
      # TODO: Open an issue for passing the git hook arguments to the only/skip
      # commands, or add new skip/only conditions e.g. 'file' and 'branch'. Then
      # I could remove this conditional.
      run: |
        # Ensure this isn't a file checkout.
        if [ {3} != '0' ]; then
          printf {1} >.git/sync-point-1.txt
          printf {2} >.git/sync-point-2.txt
        fi

sync:
  # So we can see the output of the nix-direnv and system tasks. They can take a
  # while so it's nice to see their progress.
  follow: true
  # Lefthook only applies a command's glob if the command's group has a 'files'
  # command or you use the {files} placeholder in the command[1]. Not all of my
  # commands use {files} so to ensure that globs are always applied, I always add a
  # 'files' command, even if I don't need it. The exceptions to this are the
  # pre-commit and pre-push groups since lefthook always applies globs for them.
  # Apparently the behavior of the pre-commit and pre-push groups was confusing for
  # users so the author doesn't want to use the same behavior for other groups[2].
  #
  # [1]: https://github.com/evilmartians/lefthook/blob/6858ccbc8226051a71a51c30a57f0d36a9b7ea67/docs/configuration.md#glob
  # [2]: https://github.com/evilmartians/lefthook/pull/595#issuecomment-1859784491
  files: |
    if [ -f .git/sync-point-1.txt -a -f .git/sync-point-2.txt ]; then
      git diff-tree -r --name-only --no-commit-id \
        "$(cat .git/sync-point-1.txt)" "$(cat .git/sync-point-2.txt)"
    fi
  jobs:
    # Since .envrc is in .gitignore, if you make changes to it you'll need to run one
    # of the two sync tasks below by yourself.
    - name: direnv
      glob: "direnv/direnv-config.bash"
      run: direnv reload
    # Since reloading nix-direnv can take a while (~30 seconds) there's a separate
    # task for reloading direnv and reloading nix-direnv.
    - name: direnv-and-nix-direnv
      # The scripts directory is included so script dependencies can be re-extracted
      # and loaded in the dev shell.
      glob: "{direnv/direnv-config.bash,flake.lock,*.nix,scripts/*}"
      run: ./scripts/lefthook/sync-direnv-and-nix-direnv.bash
    - name: lefthook
      # TODO: Currently, this is only needed on the first sync that's done after
      # cloning the repo. This is because lefthook syncs hooks automatically. There's
      # an issue for disabling this behavior[1]. I want it disabled because I don't
      # always want to run the hooks of another branch. For example, when I create a
      # new hook and want to test it on another branch, but then it installs the
      # hooks of the other branch.
      #
      # [1]: https://github.com/evilmartians/lefthook/issues/840
      glob: "lefthook.yaml"
      run: lefthook install --force
    - name: system
      glob: "{flake.lock,*.nix,dotfiles/*}"
      # Needs to be interactive so I can input my password when the path for
      # run-as-admin changes. This is because I specify its path in my sudoers config
      # to allow running it without a password.
      interactive: true
      # sudo policy on Pop!_OS won't let me use --preserve-env=PATH
      run: sudo -- "$(which run-as-admin)" --path "$PATH" "$(which system-config-apply)"
    - name: hammerspoon-annotations
      run: |
        bash -o pipefail -euc '
          hammerspoon_annotations="$HOME/.hammerspoon/Spoons/EmmyLua.spoon/annotations"
          destination='lua-libraries/hammerspoon-annotations'
          if [[ -e $hammerspoon_annotations && ! -e $destination ]]; then
            mkdir --parents "$(dirname "$destination")"
            ln --symbolic --force --no-dereference "$hammerspoon_annotations" "$destination"
          fi
        '
    - name: fish
      glob: "dotfiles/fish/conf.d/*.fish"
      run: fish -c fish-reload

check:
  # Lefthook only applies a command's glob if the command's group has a 'files'
  # command or you use the {files} placeholder in the command[1]. Not all of my
  # commands use {files} so to ensure globs are always applied, I always add a
  # 'files' command, even if I don't need it. The exceptions to this are the
  # pre-commit and pre-push groups since lefthook always applies globs for them.
  # Apparently the behavior of the pre-commit and pre-push groups was confusing for
  # users so the author doesn't want to use the same behavior for other groups[2].
  #
  # [1]: https://github.com/evilmartians/lefthook/blob/6858ccbc8226051a71a51c30a57f0d36a9b7ea67/docs/configuration.md#glob
  # [2]: https://github.com/evilmartians/lefthook/pull/595#issuecomment-1859784491
  #
  # This will get all the files that differ from the default branch.
  files: |
    # I'm using merge-base in case the current branch is behind the default branch.
    git diff --diff-filter=d --name-only "$(git merge-base origin/HEAD HEAD)"
    # Untracked files
    git ls-files --others --exclude-standard
  jobs:
    - name: generate
      group:
        jobs:
          - name: readme-table-of-contents
            glob: README.md
            run: ./scripts/run-fix.bash doctoc README.md --github
          - name: gomod2nix
            glob: "gozip/go.mod"
            run: ./scripts/run-fix.bash gomod2nix --dir gozip generate
          - name: nix-version
            glob: "flake.lock"
            run: ./scripts/run-fix.bash ./scripts/code-generation/add-nix-version-to-readme.bash
          - name: system-configs
            glob: "*.nix"
            run: ./scripts/run-fix.bash ./scripts/code-generation/add-system-configurations-to-readme.bash
          - name: flake-lock
            glob: "flake.nix"
            run: ./scripts/run-fix.bash nix flake lock
    - name: fix-lint
      group:
        jobs:
          - name: deadnix
            glob: "*.nix"
            run: ./scripts/run-fix.bash deadnix --quiet --edit {files}
          - name: ruff
            glob: "*.py"
            run: ./scripts/run-fix.bash ruff check --fix-only {files}
          - name: statix
            glob: "*.nix"
            # statix doesn't support passing multiple files yet:
            # https://github.com/nerdypepper/statix/issues/69
            run: "./scripts/run-fix.bash parallel statix fix -- {files}"
          - name: markdownlint-cli2
            glob: "*.md"
            run: ./scripts/run-fix.bash markdownlint-cli2 --fix {files}
          - name: go-mod-tidy
            glob: "gozip/go.{mod,sum}"
            run: ./scripts/run-fix.bash go -C gozip mod tidy
          - name: typos
            glob: "{justfile,.editorconfig,.shellcheckrc,*.{sh,bash,fish,go,ini,js,json,lua,nix,py,toml,yaml,zsh}}"
            run: ./scripts/run-fix.bash typos --write-changes --format silent {files}
    # Run formatting after lint fixes because sometimes a lint fix produces code that
    # doesn't comply with the formatting.
    - name: format
      group:
        jobs:
          - name: taplo
            glob: "*.toml"
            exclude: [gozip/gomod2nix.toml]
            run: ./scripts/run-fix.bash taplo format {files}
          - name: prettier
            glob: "*.{md,js,json,json{5,c},yaml}"
            # VS Code formats its settings files automatically when you change a
            # setting through its UI.
            exclude: ["*.vscode/*.json"]
            run: ./scripts/run-fix.bash prettier --write {files}
          - name: shfmt
            glob: "*.{sh,bash}"
            run: ./scripts/run-fix.bash shfmt --simplify --binary-next-line --case-indent --indent 2 --write {files}
          - name: fish_indent
            glob: "*.fish"
            run: ./scripts/run-fix.bash fish_indent --write {files}
          - name: nixfmt
            glob: "*.nix"
            # --verify confirms that the formatted code parses the same as the
            # input code.
            run: ./scripts/run-fix.bash nixfmt --verify {files}
          - name: just
            # TODO: just's builtin formatter currently removes/rearranges comments.
            # Until this is fixed I'll disable it:
            # https://github.com/casey/just/issues/862.
            skip: true
            glob: "justfile"
            run: ./scripts/run-fix.bash just --unstable --fmt --justfile {files}
          - name: stylua
            glob: "*.lua"
            run: ./scripts/run-fix.bash stylua {files}
          - name: gofmt
            glob: "*.go"
            run: ./scripts/run-fix.bash gofmt -w {files}
          - name: ruff-format
            glob: "*.py"
            run: ./scripts/run-fix.bash ruff format {files}
          - name: ruff-format-sort-imports
            glob: "*.py"
            run: ./scripts/run-fix.bash ruff check --select I --fix-only {files}
    # I'm putting the check-lint and test groups in their own group so I can run them
    # in parallel. It's safe to do so because they don't modify any files.
    - name: check-lint-and-test
      group:
        parallel: true
        jobs:
          - name: check-lint
            group:
              parallel: true
              jobs:
                - name: ltex-cli-plus
                  # TODO: The CLI isn't respecting my dictionary or ignore files so I
                  # can't use it: https://github.com/ltex-plus/ltex-ls-plus/issues/56
                  skip: true
                  glob: "*.md"
                  run: ltex-cli-plus --server-command-line=ltex-ls-plus {files}
                - name: golangci-lint
                  # TODO: Don't want to address these issues yet
                  skip: true
                  glob: "*.go"
                  run: golangci-lint run {files}
                - name: ruff
                  glob: "*.py"
                  run: ruff check {files}
                - name: fish
                  glob: "*.fish"
                  # TODO: Fish doesn't support passing multiple files, I should open
                  # an issue.
                  run: "parallel fish --no-execute -- {files}"
                - name: desktop-file-validate
                  glob: "*.desktop"
                  run: desktop-file-validate {files}
                - name: markdownlint-cli2
                  glob: "*.md"
                  run: markdownlint-cli2 {files}
                - name: shellcheck
                  glob: "*.{sh,bash}"
                  run: shellcheck {files}
                - name: yamllint
                  glob: "*.yaml"
                  run: yamllint --strict {files}
                - name: actionlint
                  glob: ".github/workflows/*.yaml"
                  run: actionlint {files}
                - name: statix
                  glob: "*.nix"
                  # statix doesn't support passing multiple files yet:
                  # https://github.com/nerdypepper/statix/issues/69
                  run: "parallel statix check -- {files}"
                - name: typos
                  glob: "{justfile,.editorconfig,.shellcheckrc,*.{sh,bash,fish,go,ini,js,json,lua,nix,py,toml,yaml,zsh}}"
                  run: typos {files}
                - name: mypy
                  glob: "dotfiles/smart_plug/*.py"
                  run: mypy dotfiles/smart_plug
                - name: isutf8
                  exclude:
                    # Apparently, this file isn't valid UTF-8, but macOS generated it
                    # so I won't change it.
                    - dotfiles/keyboard/US keyboard - no accent keys.bundle/Contents/Resources/U.S. copy.icns
                  run: isutf8 {files}
                - name: editorconfig-checker
                  exclude:
                    # These files are only edited by COSMIC, I'm just backing them up.
                    - dotfiles/cosmic/config/*
                  # I'm disabling the indentation size check because it applies to
                  # comments as well and I don't want it to. I could add inline
                  # directives to disable it for comments, but that would be
                  # cumbersome.
                  run: editorconfig-checker --disable-indent-size {files}
                - name: config-file-validator
                  glob: "*.{editorconfig,json,ini}"
                  # VS Code's configuration files end in .json, but they're actually
                  # jsonc files.
                  exclude: ["*.vscode/*.json"]
                  run: validator -groupby pass-fail {files}
                - name: commit-message-typos
                  skip:
                    # Don't run in CI since this check isn't required. It isn't
                    # required because there's no easy way to ignore false positives
                    # in a commit message e.g. "no qa".
                    - run: >
                        [ "$CI" = true ]
                  run: |
                    bash -o pipefail -euc '
                      base_ref="${GIT_REMOTE:-origin}/${GIT_REF:-HEAD}"
                      readarray -t commits_to_check \
                        < <(git rev-list --abbrev-commit --ancestry-path "$base_ref"..HEAD)
                      found_problem=
                      for commit in "${commits_to_check[@]}"; do
                        commit_message_subject="$(git show --no-patch --format=%s "$commit")"
                        echo "Checking commit $commit ($commit_message_subject)..."
                        commit_full_message="$(git show --no-patch --format=%B "$commit")"
                        if ! echo "$commit_full_message" | typos --format brief -; then
                          found_problem=1
                        fi
                      done
                      [[ ! "$found_problem" ]]
                    '
                - name: renovate-config-validator
                  glob: ".github/{renovate,renovate-global,renovate-automerge-preset}.json5"
                  run: renovate-config-validator --strict {files}
                - name: taplo
                  glob: "*.toml"
                  # This is a generated file
                  exclude: [gozip/gomod2nix.toml]
                  run: taplo lint {files}
          - name: test
            group:
              parallel: true
              jobs:
                - name: flake
                  skip:
                    # This would take a long time to run in GitHub Actions since it
                    # would have to download all the dependencies.
                    - run: '[ "$CI" = true ]'
                  run: nix flake check
                - name: nix-config
                  skip:
                    - run: '[ "$CI" = true ]'
                  glob: "{*.nix,flake.lock}"
                  run: nix config check
