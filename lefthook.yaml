# yaml-language-server: $schema=https://raw.githubusercontent.com/evilmartians/lefthook/master/schema.json

# TODO: Lefthook sets its colors based on the background color of the terminal to
# ensure good contrast[1], but it doesn't seem to be working for me so I'm using ANSI
# colors instead. I should report this.
#
# [1]: https://github.com/evilmartians/lefthook/pull/482
colors:
  cyan: 6
  gray: 8
  green: 2
  red: 1
  yellow: 3

# Only show the output of commands that fail.
output:
  - execution_info

templates:
  # Usage: {fix_wrapper} [fix_command]...
  #
  # This template runs the given fix command and reports any fixed problems
  # appropriately depending on whether it's run locally or in CI. Use this to run any
  # fix. A fix is any check that modifies files like a formatter or code generator.
  fix_wrapper: |
    set -o errexit
    set -o nounset
    set -o pipefail
    shopt -s nullglob
    shopt -s inherit_errexit

    # I include untracked files in case a fix command creates new files, like a code
    # generation fix for example.
    function diff_including_untracked {
      git ls-files -z --others --exclude-standard \
        | {
          readarray -d '' untracked_files
          track_files "${untracked_files[@]}"
          # This gets called in CI so I can't use a pager
          git --no-pager diff --color
          untrack_files "${untracked_files[@]}"
        }
    }

    function track_files {
      if (($# > 0)); then
        git add --intent-to-add -- "$@"
      fi
    }

    function untrack_files {
      if (($# > 0)); then
        git reset --quiet -- "$@"
      fi
    }

    function _fix_wrapper {
      diff_before_running_fix="$(diff_including_untracked)"
      "$@"
      diff_after_running_fix="$(diff_including_untracked)"

      if [[ $diff_before_running_fix == "$diff_after_running_fix" ]]; then
        return
      fi

      if [[ ${CI:-} == 'true' ]]; then
        # Print the diff so people can see it in the CI console
        diff_including_untracked

        # Remove the changes to keep the git repository in a clean state for the next
        # fix command that runs. I could drop the stash as well, but in the event that
        # this code accidentally runs when the script is run locally, I don't want to
        # permanently delete anyone's changes.
        git stash --include-untracked 1>/dev/null

        # I'm failing here to make lefthook fail which will cause the overall CI check
        # to fail.
        exit 1
      else
        # Why I'm failing here:
        #   - This failure will cause the pre-commit hook to abort the push so I can fix
        #     up my commits.
        #   - When I run all the fix commands together, the failures let me know which
        #     fix commands actually fixed anything since lefthook will highlight failed
        #     commands differently.
        exit 1
      fi
    }

    _fix_wrapper \

# Git Hooks
# -----------------------------------------------------------------------------------
# Do not specify globs for any jobs that belong to a git hook because they
# won't be applied unless their run command uses `{files}`. You could get around this
# by adding something like `: {files};` to the beginning of every run command, but
# that would lead to a subtle bug if you ever forgot to add it. For custom hooks, I
# get around this by always specifying a `files` command at the hook level since per
# the documentation[1], globs will always be applied if a `files` command is used.
# This does not seem to apply to git hooks though and I think that's a bug. I should
# report it. There was a pull request for always applying globs, but it was
# closed[2].
#
# [1]: https://lefthook.dev/configuration/glob.html
# [2]: https://github.com/evilmartians/lefthook/pull/595

commit-msg:
  jobs:
    - name: commit-msg-typos-check
      run: typos {1}

# Lefthook stashes unstaged changes before running this hook, but not untracked
# files: https://github.com/evilmartians/lefthook/issues/833
pre-commit:
  jobs:
    - name: pre-commit-check
      run: printf '%s\0' {staged_files} | lefthook run check --files-from-stdin

post-merge:
  jobs:
    - name: mark-sync-point
      run: |
        printf ORIG_HEAD >.git/sync-point-1.txt
        printf HEAD >.git/sync-point-2.txt

post-rewrite:
  jobs:
    - name: mark-sync-point
      only: rebase
      run: |
        printf ORIG_HEAD >.git/sync-point-1.txt
        printf HEAD >.git/sync-point-2.txt

post-checkout:
  jobs:
    - name: mark-sync-point
      # TODO: Open an issue for passing the git hook arguments to the only/skip
      # commands, or add new skip/only conditions e.g. 'file' and 'branch'. Then
      # I could remove this conditional.
      run: |
        # Ensure this isn't a file checkout.
        if [ {3} != '0' ]; then
          printf {1} >.git/sync-point-1.txt
          printf {2} >.git/sync-point-2.txt
        fi

# Custom Hooks
# -----------------------------------------------------------------------------------
# Lefthook only applies a job's glob if it, or the hook it belongs to, has a 'files'
# command or you use the {files} placeholder in the run command[1]. Some of the run
# commands below don't use {files} so to ensure that globs are always applied, I add
# a 'files' command to the hook. There was a pull request for always applying globs,
# but it was closed[2].
#
# [1]: https://lefthook.dev/configuration/glob.html
# [2]: https://github.com/evilmartians/lefthook/pull/595

sync:
  # So we can see the output of the direnv and system tasks. They can take a
  # while so it's nice to see their progress.
  follow: true
  # Custom hooks should always have a files command. See the comment below the
  # "Custom Hooks" heading for why that is.
  files: |
    if [ -f .git/sync-point-1.txt -a -f .git/sync-point-2.txt ]; then
      git diff-tree -r --name-only --no-commit-id \
        "$(cat .git/sync-point-1.txt)" "$(cat .git/sync-point-2.txt)"
    fi
  jobs:
    - name: direnv
      glob:
        - direnv/direnv-config.bash
        - nix/*
        - flake.nix
        - flake.lock
        # These directories are included so script dependencies can be re-extracted
        # and loaded into the dev shell.
        - scripts/*
        - mise/tasks/*
      run: ./scripts/lefthook/sync-direnv.bash
    - name: lefthook
      # TODO: Currently, this is only needed on the first sync that's done after
      # cloning the repo. This is because lefthook syncs hooks automatically. There's
      # an issue for disabling this behavior[1]. I want it disabled because I don't
      # always want to run the hooks of another branch. For example, when I create a
      # new hook and want to test it on another branch, but then it installs the
      # hooks of the other branch.
      #
      # [1]: https://github.com/evilmartians/lefthook/issues/840
      glob: "lefthook.yaml"
      run: lefthook install --force
    - name: system
      glob:
        - dotfiles/*
        - nix/*
        - flake.nix
        - flake.lock
      # Needs to be interactive so I can input my password when the path for
      # run-as-admin changes. This is because I specify its path in my sudoers config
      # to allow running it without a password.
      interactive: true
      # sudo policy on Pop!_OS won't let me use --preserve-env=PATH
      run: sudo -- "$(which run-as-admin)" --path "$PATH" "$(which system-config-apply)"
    - name: fish
      glob: dotfiles/fish/conf.d/*.fish
      run: fish -c fish-reload

check:
  # Custom hooks should always have a files command. See the comment below the
  # "Custom Hooks" heading for why that is.
  files: ":"
  jobs:
    - name: _
      # Don't run checks on generated files.
      #
      # This job only exists so the excludes can get inherited by all of its
      # descendants. There's an open feature request for a global exclude list[1]. If
      # that gets implemented, I won't need this extra job anymore.
      #
      # [1]: https://github.com/evilmartians/lefthook/issues/593
      exclude:
        - gozip/gomod2nix.toml
        - "*.vscode/*.json"
        - dotfiles/keyboard/US keyboard - no accent keys.bundle/*
        - dotfiles/cosmic/config/*
        - flake.lock
        - go.sum
        - docs/tasks.html
      group:
        jobs:
          - name: generate
            group:
              jobs:
                - name: readme-table-of-contents
                  glob: README.md
                  run: "{fix_wrapper} doctoc README.md --github"
                - name: gomod2nix
                  glob: gozip/go.mod
                  run: "{fix_wrapper} gomod2nix --dir gozip generate"
                - name: nix-version
                  glob: flake.lock
                  run: "{fix_wrapper} ./scripts/lefthook/code-generation/add-nix-version-to-readme.bash"
                - name: system-configs
                  glob: "*.nix"
                  run: "{fix_wrapper} ./scripts/lefthook/code-generation/add-system-configurations-to-readme.bash"
                - name: flake-lock
                  glob: flake.nix
                  run: "{fix_wrapper} nix flake lock"
                - name: task-docs
                  glob: mise/*
                  # TODO: markdown2html-converter hasn't been updated in a couple
                  # years. I'd like to switch to markdown-to-html-cli[1], but it
                  # isn't in nixpkgs. Maybe I can add it or make a request.
                  # [1]: https://github.com/jaywcjlove/markdown-to-html-cli
                  run: |
                    # markdown2html-converter only accepts files that end in .md so I
                    # can't use process substitution
                    temp="$(mktemp --suffix '.md')"
                    mise generate task-docs --style detailed --output "$temp"
                    {fix_wrapper} markdown2html-converter \
                      --force \
                      --title 'Tasks' \
                      --html-path docs/tasks.html "$temp"
          - name: fix-lint
            group:
              jobs:
                - name: deadnix
                  glob: "*.nix"
                  run: "{fix_wrapper} deadnix --quiet --edit {files}"
                - name: ruff
                  glob: "*.py"
                  run: "{fix_wrapper} ruff check --fix-only {files}"
                - name: statix
                  glob: "*.nix"
                  # statix doesn't support passing multiple files yet:
                  # https://github.com/nerdypepper/statix/issues/69
                  run: "{fix_wrapper} parallel statix fix -- {files}"
                - name: markdownlint-cli2
                  glob: "*.md"
                  run: "{fix_wrapper} markdownlint-cli2 --fix {files}"
                - name: go-mod-tidy
                  glob: gozip/go.{mod,sum}
                  run: "{fix_wrapper} go -C gozip mod tidy"
                - name: typos
                  glob:
                    - .editorconfig
                    - shellcheckrc
                    - "*.{sh,bash,fish,go,ini,js,json,lua,nix,py,toml,yaml,zsh}"
                  run: "{fix_wrapper} typos --write-changes --format silent {files}"
          # Run formatting after lint fixes because sometimes a lint fix produces
          # code that doesn't comply with the formatting.
          - name: format
            group:
              jobs:
                - name: taplo
                  glob: "*.toml"
                  run: "{fix_wrapper} taplo format {files}"
                - name: prettier
                  glob: "*.{md,js,json,json{5,c},yaml}"
                  run: "{fix_wrapper} prettier --write {files}"
                - name: shfmt
                  glob: "*.{sh,bash}"
                  run: "{fix_wrapper} shfmt --simplify --binary-next-line --case-indent --indent 2 --write {files}"
                - name: fish_indent
                  glob: "*.fish"
                  run: "{fix_wrapper} fish_indent --write {files}"
                - name: nixfmt
                  glob: "*.nix"
                  # --verify confirms that the formatted code parses the same as the
                  # input code.
                  run: "{fix_wrapper} nixfmt --verify {files}"
                - name: stylua
                  glob: "*.lua"
                  run: "{fix_wrapper} stylua {files}"
                - name: gofmt
                  glob: "*.go"
                  run: "{fix_wrapper} gofmt -w {files}"
                - name: ruff-format
                  glob: "*.py"
                  run: "{fix_wrapper} ruff format {files}"
                - name: ruff-format-sort-imports
                  glob: "*.py"
                  run: "{fix_wrapper} ruff check --select I --fix-only {files}"
          # I'm putting the check-lint and test groups in their own group so I can
          # run them in parallel. It's safe to do so because they don't modify any
          # files.
          - name: _
            group:
              parallel: true
              jobs:
                - name: check-lint
                  group:
                    parallel: true
                    jobs:
                      - name: ltex-cli-plus
                        # TODO: The CLI isn't respecting my dictionary or ignore
                        # files so I can't use it:
                        # https://github.com/ltex-plus/ltex-ls-plus/issues/56
                        skip: true
                        glob: "*.md"
                        run: ltex-cli-plus --server-command-line=ltex-ls-plus {files}
                      - name: golangci-lint
                        # TODO: Don't want to address these issues yet
                        skip: true
                        glob: "*.go"
                        run: golangci-lint run {files}
                      - name: ruff
                        glob: "*.py"
                        run: ruff check {files}
                      - name: fish
                        glob: "*.fish"
                        # TODO: Fish doesn't support passing multiple files, I should
                        # open an issue.
                        run: "parallel fish --no-execute -- {files}"
                      - name: desktop-file-validate
                        glob: "*.desktop"
                        run: desktop-file-validate {files}
                      - name: markdownlint-cli2
                        glob: "*.md"
                        run: markdownlint-cli2 {files}
                      - name: shellcheck
                        glob: "*.{sh,bash}"
                        run: shellcheck {files}
                      - name: actionlint
                        glob: ".github/workflows/*.yaml"
                        run: actionlint {files}
                      - name: statix
                        glob: "*.nix"
                        # statix doesn't support passing multiple files yet:
                        # https://github.com/nerdypepper/statix/issues/69
                        run: "parallel statix check -- {files}"
                      - name: nixpkgs-lint
                        glob: "*.nix"
                        run: nixpkgs-lint --include-unfinished-lints -- {files}
                      - name: typos
                        glob:
                          - .editorconfig
                          - shellcheckrc
                          - "*.{sh,bash,fish,go,ini,js,json,lua,nix,py,toml,yaml,zsh}"
                        run: typos {files}
                      - name: mypy
                        glob: dotfiles/smart_plug/*.py
                        run: mypy dotfiles/smart_plug
                      - name: isutf8
                        run: isutf8 {files}
                      - name: editorconfig-checker
                        # I'm disabling the indentation size check because it applies
                        # to comments as well and I don't want it to.
                        run: editorconfig-checker --disable-indent-size {files}
                      - name: config-file-validator
                        glob: "*.{editorconfig,json,ini,yaml,toml}"
                        run: validator -groupby pass-fail {files}
                      - name: renovate-config-validator
                        glob: ".github/renovate*.json5"
                        # TODO: The validator says this file is invalid, but it seems
                        # to work fine.
                        exclude: ".github/renovate-common-preset.json5"
                        run: renovate-config-validator --strict {files}
                      - name: hjson
                        glob: "*.hjson"
                        # hjson-cli prints the file in json format to stdout so I'm
                        # hiding that output.
                        #
                        # TODO: hjson-cli doesn't support passing multiple files, I
                        # should open an issue.
                        run: "parallel hjson-cli -- {files} >/dev/null"
                - name: test
                  group:
                    parallel: true
                    jobs:
                      - name: flake
                        glob:
                          - flake.nix
                          - flake.lock
                          - nix/*
                          - dotfiles/*
                          - gozip/*
                        skip:
                          # This would take a long time to run in GitHub Actions
                          # since it would have to download all the dependencies.
                          - run: '[ "$CI" = true ]'
                        run: nix flake check
                      - name: nix-config
                        skip:
                          - run: '[ "$CI" = true ]'
                        glob:
                          - "*.nix"
                          - flake.lock
                        run: nix config check
