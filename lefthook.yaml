# yaml-language-server: $schema=https://raw.githubusercontent.com/evilmartians/lefthook/master/schema.json

# TODO: Lefthook sets its colors based on the background color of the terminal to
# ensure good contrast[1], but it doesn't seem to be working for me so I'm using ANSI
# colors instead. I should report this.
#
# [1]: https://github.com/evilmartians/lefthook/pull/482
colors:
  cyan: 6
  gray: 8
  green: 2
  red: 1
  yellow: 3

output:
  - execution_info
  # Even if a command succeeds, it still may be useful to see its output in case it
  # prints a warning for a deprecated feature or the fact that the project is no
  # longer being maintained.
  - execution_out
  - failure

templates:
  run_fix: mise run run-fix
  # When `auto-sync` runs, some of the sync jobs may depend on something from the
  # newly synced direnv environment. To ensure those sync jobs run with the newly
  # synced direnv environment, we sync direnv first and run the rest of the jobs with
  # this template.
  #
  # Setting `DIRENV_LOG_FORMAT` to an empty string hides direnv's logs.
  direnv_exec: DIRENV_LOG_FORMAT='' direnv exec .
  # Some of the jobs in the 'check' hook don't specify a glob because they apply to
  # all files. However, I also want at least one file to be passed into them. If you
  # use `lefthook run check --files-from-stdin` and stdin is empty, jobs without a
  # glob will still be run. To stop those jobs from running when no files are passed
  # in, I use this template.
  exit_if_no_files: |
    exit_if_no_files() {
      if [ $# -eq 0 ]; then
        exit 0
      fi
    }

    # Add a '\' to the end so arguments passed to this template are on the same line
    # as this function call.
    exit_if_no_files \

# Git Hooks
# -----------------------------------------------------------------------------------
# Do not specify globs for any jobs that belong to a git hook because they won't be
# applied unless their run command uses `{files}`. You could get around this by
# adding something like `: {files};` to the beginning of every run command, but that
# would lead to a subtle bug if you ever forgot to add it. For custom hooks, I get
# around this by always specifying a `files` command at the hook level since the
# documentation[1] states that globs will always be applied if a `files` command is
# used. This does not seem to apply to git hooks though and I think that's a bug so I
# should report it. There was a pull request for always applying globs, but it was
# closed[2].
#
# [1]: https://lefthook.dev/configuration/glob.html
# [2]: https://github.com/evilmartians/lefthook/pull/595

commit-msg:
  jobs:
    - name: check-commit
      # I enable `interactive` for some of the jobs in the `check` group so I need
      # `interactive` here as well or it won't work.
      interactive: true
      # Running the commit message check, followed by the file checks, has the
      # following advantages:
      #   - We don't have to wait for the file checks to finish before we get to
      #     enter a commit message.
      #   - If there's a problem with the message, the file checks won't be run. This
      #     way we don't have to rerun file checks if the commit message has a
      #     problem which is important since the file checks usually take a lot
      #     longer.
      run: |
        mise run recommit check {1} bash -ceuo pipefail '
          lefthook run check-commit-message --file "$1"
          printf "%s\0" "${@:2}" | lefthook run check --files-from-stdin
        ' -- {1} {staged_files}

prepare-commit-msg:
  jobs:
    - name: restore-commit-msg
      run: mise run recommit restore {0}

post-rewrite:
  jobs:
    - name: auto-sync
      # I enabled `interactive` on some of the jobs in the 'sync' group so I need
      # `interactive` here as well or they won't work.
      interactive: true
      run: AUTO_SYNC_HOOK_NAME='post-rewrite' mise run auto-sync {0} -- lefthook run sync

post-merge:
  jobs:
    - name: auto-sync
      # I enabled `interactive` on some of the jobs in the 'sync' group so I need
      # `interactive` here as well or they won't work.
      interactive: true
      run: AUTO_SYNC_HOOK_NAME='post-merge' mise run auto-sync {0} -- lefthook run sync

post-checkout:
  jobs:
    - name: auto-sync
      # I enabled `interactive` on some of the jobs in the 'sync' group so I need
      # `interactive` here as well or it won't work.
      interactive: true
      run: AUTO_SYNC_HOOK_NAME='post-checkout' mise run auto-sync {0} -- lefthook run sync

post-commit:
  jobs:
    - name: auto-sync
      run: AUTO_SYNC_HOOK_NAME='post-commit' mise run auto-sync

# Custom Hooks
# -----------------------------------------------------------------------------------
# Lefthook only applies a job's glob if it, or the hook it belongs to, has a 'files'
# command or you use the {files} placeholder in the run command[1]. Some of the run
# commands below don't use {files} so to ensure that globs are always applied, I add
# a 'files' command to the hook. There was a pull request for always applying globs,
# but it was closed[2].
#
# [1]: https://lefthook.dev/configuration/glob.html
# [2]: https://github.com/evilmartians/lefthook/pull/595

check-commit-message:
  # Custom hooks should always have a files command. See the comment below the
  # "Custom Hooks" heading for why that is.
  files: ":"
  jobs:
    - name: typos
      run: typos {files}

sync:
  # Custom hooks should always have a files command. See the comment below the
  # "Custom Hooks" heading for why that is.
  files: |
    if [ -n "$AUTO_SYNC_LAST_COMMIT" ]; then
      git diff --name-only "$AUTO_SYNC_LAST_COMMIT" HEAD
    else
      git ls-files
    fi
  jobs:
    # This job is first since the other jobs may depend on the newly synced direnv
    # environment.
    - name: direnv
      # Why `interactive` is enabled:
      #   - This job can take a while so being able to see the output in real time
      #     could reveal bottlenecks.
      #   - If I can see the output in real time, I can spot accidental nix cache
      #     misses and cancel the job instead of waiting for nix to rebuild the
      #     package.
      interactive: true
      glob:
        - direnv/*
        - direnv.bash

        # - So task dependencies can be reloaded into the dev shell.
        # - If the task we run in the `run` command changes
        - mise/tasks/*

        # - These affect nix-direnv
        # - If the version of any program that gets called here changes
        - nix/*
        - npins/*
        - flake.nix
        - flake.lock
        - gozip/*

        # If this configuration changes
        - lefthook.yaml
      run: direnv-reload

    - name: lefthook
      only:
        # We only need to sync this once since lefthook reinstalls hooks
        # automatically.
        - run: '[ ! -e "$DEV_SHELL_STATE/lefthook-installed" ]'
      run: |
        {direnv_exec} bash -euc '
          lefthook install --force
          touch "$DEV_SHELL_STATE/lefthook-installed"
        '
    - name: system
      glob:
        - smart_plug/*
        - dotfiles/*

        # - These affect the system configuration
        # - If the version of any program that gets called here changes
        - nix/*
        - npins/*
        - flake.nix
        - flake.lock

        # If this configuration changes
        - lefthook.yaml
      # Why `interactive` is enabled:
      #   - So I can input my password for `sudo`
      #   - This job can take a while so being able to see the output in real time
      #     could reveal bottlenecks.
      #   - If I can see the output in real time, I can spot accidental nix cache
      #     misses and cancel the job instead of waiting for nix to rebuild the
      #     package.
      interactive: true
      # sudo policy on Pop!_OS won't let me use --preserve-env=PATH
      #
      # Use `realpath` since the sudoers config specifies the path of `run-as-admin`
      # in the nix store, but `command` will return the path in my user's profile.
      run: |
        sudo -- \
          "$(realpath "$(command -v run-as-admin)")" \
          --path "$PATH" \
          {direnv_exec} mise run system:sync
    - name: fish
      glob:
        - dotfiles/fish/conf.d/*.fish

        # - If the version of any program that gets called here changes
        - nix/*
        - npins/*
        - flake.nix
        - flake.lock

        # If this configuration changes
        - lefthook.yaml
      run: "{direnv_exec} fish -c fish-reload"

check:
  # Custom hooks should always have a files command. See the comment below the
  # "Custom Hooks" heading for why that is.
  files: |
    if [ "$LEFTHOOK_CHECK_ALL_FILES" = 'true' ]; then
      git ls-files
    else
      # These are the files that differ between the current branch and the default
      # branch. We use the merge base in case the current branch is behind the
      # default branch.
      git diff --diff-filter=d --name-only "$(git merge-base origin/HEAD HEAD)"
    fi

    # Untracked files
    git ls-files --others --exclude-standard
  jobs:
    # This job only exists so the excludes below can get inherited by all of its
    # descendants. There's an open feature request for a global exclude list[1]. If
    # that gets implemented, I won't need this extra job anymore.
    #
    # [1]: https://github.com/evilmartians/lefthook/issues/593
    - exclude:
        - gozip/gomod2nix.toml
        - ".vscode/ltex*"
        - dotfiles/keyboard/US keyboard - no accent keys.bundle/*
        - dotfiles/cosmic/config/*
        - docs/*
      group:
        # Enabling `piped` is useful for the scenario where there are issues found by
        # fast checks, but not slow ones. Without `piped`, you would run all the
        # checks only to find an issue with a fast check and then have to run all the
        # checks again once that issue is fixed. With `piped`, the slow ones won't
        # run since an issue was found by one of the faster ones. Once you fix the
        # issue found by the fast check, then the slower ones will run. On the other
        # hand, this means you'll have to keep rerunning checks that have already
        # passed just to see the issues found by subsequent checks. To mitigate this,
        # some of the checks are put in groups.
        #
        # One example of when this is useful is when there's a formatting issue,
        # which is common if you aren't formatting the code in your IDE, but all of
        # the other checks are successful. Without `piped`, you'd have to wait for
        # all checks to complete, commit the formatted code, then run all the checks
        # again. With `piped`, the checks stop after the group that contains the
        # formatters finishes. This way, you can commit the formatted code and the
        # next time you run the checks, all of them will run.
        #
        # This is also useful for CI since you wouldn't want your CI runners to waste
        # time and money running slow checks if a fast one has already failed.
        piped: true
        jobs:
          # All fixes should be grouped together to make it easy to run them all in
          # an autofix workflow in CI.
          #
          # Why fixes should run before other checks:
          #   - A fix could produce code that would fail another check
          #   - A fix could fix an issue that would have been found by another check
          - name: fix
            group:
              jobs:
                - name: flake-lock
                  glob: flake.nix
                  run: "{run_fix} nix flake lock"
                - name: readme-table-of-contents
                  glob: README.md
                  run: "{run_fix} doctoc README.md --github"
                - name: readme-nix-version
                  glob:
                    - flake.lock
                  run: "{run_fix} mise run lefthook:check:add-nix-version-to-readme"
                - name: readme-config-names
                  glob: "*.nix"
                  exclude:
                    - npins/*
                  run: "{run_fix} mise run lefthook:check:add-config-names-to-readme"
                - name: readme-nixpkgs-commit
                  glob:
                    - flake.lock
                  run: "{run_fix} mise run lefthook:check:add-nixpkgs-commit-to-readme"
                - name: gomod2nix
                  glob: gozip/go.mod
                  run: "{run_fix} gomod2nix --dir gozip generate"
                # Globs do not apply to deleted files. This means if a job has a glob
                # and there are only deleted files, then the job will not run. This
                # is a problem for this job since it should run when tasks are
                # deleted, to remove them from the documentation. Since this job runs
                # quickly, we allow it to always run by not specifying a glob.
                - name: task-docs
                  # TODO: markdown2html-converter hasn't been updated in a couple
                  # years. I'd like to switch to markdown-to-html-cli[1], but it
                  # isn't in nixpkgs. Maybe I can add it or make a request.
                  #
                  # [1]: https://github.com/jaywcjlove/markdown-to-html-cli
                  run: |
                    {run_fix} bash -euc '
                      markdown="$(mktemp --directory)/temp.md"
                      html="docs/tasks.html"
                      mise generate task-docs --style detailed --output "$markdown"
                      markdown2html-converter \
                        --no-cjk-fonts \
                        --force \
                        --title "Tasks" \
                        --html-path "$html" \
                        "$markdown"
                      # Format the HTML so it is easier to review changes to it.
                      #
                      # I could also let the "prettier" job further down format this
                      # file, but this would cause a problem: markdown2html-converter
                      # always regenerates the HTML, even if the task documentation
                      # is up to date. Since the format of the HTML from
                      # markdown2html-converter does not match the format that
                      # prettier would use, this task would always fail since it
                      # would always make a change.
                      prettier --list-different --write "$html"
                    '
                - name: deadnix
                  glob: "*.nix"
                  exclude:
                    - npins/*
                  run: "{run_fix} deadnix --quiet --edit {files}"
                - name: ruff
                  glob: "*.py"
                  run: "{run_fix} ruff check --fix-only {files}"
                - name: statix-fix
                  glob: "*.nix"
                  exclude:
                    - npins/*
                    # I want to ignore a fix in this file, but statix doesn't support
                    # ignoring fixes with comments[1] so I'll skip the whole file.
                    #
                    # [1]: https://github.com/oppiliappan/statix/issues/61
                    - nix/packages/default.nix
                  # statix doesn't support passing multiple files yet:
                  # https://github.com/oppiliappan/statix/issues/69
                  run: "{run_fix} parallel statix fix -- {files}"
                - name: markdownlint-cli2-fix
                  glob: "*.md"
                  run: "{run_fix} markdownlint-cli2 --fix {files}"
                - name: go-mod-tidy
                  glob: gozip/go.{mod,sum}
                  run: "{run_fix} go -C gozip mod tidy"
                - name: golangci-lint
                  glob: "*.go"
                  root: "gozip/"
                  run: "{run_fix} golangci-lint run --fix"
                - name: go-version
                  glob:
                    - flake.lock
                  run: "{run_fix} mise run lefthook:check:add-go-version-to-go-mod"
                - name: npins
                  glob:
                    - flake.lock
                    - npins/*
                  run: npins upgrade

                # Formatters
                # -------------------------------------------------------------------
                # Formatters should run after the other fixes since some fixes may
                # produce code that doesn't comply with the formatting.

                # SYNC: taplo
                - name: taplo
                  glob: "*.toml"
                  run: "{run_fix} taplo format {files}"
                # SYNC: prettier
                - name: prettier
                  glob: "*.{md,json,json5,jsonc,yaml}"
                  exclude:
                    - npins/*
                  run: "{run_fix} prettier --list-different --write {files}"
                # SYNC: shfmt
                - name: shfmt
                  glob: "*.{sh,bash}"
                  run: "{run_fix} shfmt --write {files}"
                # SYNC: fish_indent
                - name: fish_indent
                  glob: "*.fish"
                  run: "{run_fix} fish_indent --write {files}"
                # SYNC: nixfmt
                - name: nixfmt
                  glob: "*.nix"
                  exclude:
                    - npins/*
                  run: "{run_fix} nixfmt --verify {files}"
                # SYNC: stylua
                - name: stylua
                  glob: "*.lua"
                  run: "{run_fix} stylua --verify {files}"
                # SYNC: gofmt
                - name: gofmt
                  glob: "*.go"
                  run: "{run_fix} gofmt -w {files}"
                # SYNC: ruff-format
                - name: ruff-format
                  glob: "*.py"
                  run: "{run_fix} ruff format {files}"
                # SYNC: ruff-format-sort-imports
                - name: ruff-format-sort-imports
                  glob: "*.py"
                  run: "{run_fix} ruff check --select I --fix-only {files}"
          - group:
              # It's safe to run these checks in parallel since they don't modify any
              # files
              parallel: true
              jobs:
                - name: golangci-lint
                  glob: "*.go"
                  root: "gozip/"
                  run: golangci-lint run
                - name: gopls
                  glob: "*.go"
                  run: |
                    set -e
                    # TODO: gopls should have an option for failing if an error was
                    # found.
                    issues="$(gopls check {files})"
                    if [ -n "$issues" ]; then
                      echo "$issues"
                      exit 1
                    fi
                - name: ruff
                  glob: "*.py"
                  run: ruff check {files}
                - name: fish
                  glob: "*.fish"
                  # TODO: Fish doesn't support passing multiple files, I should open
                  # an issue.
                  run: parallel fish --no-execute -- {files}
                # SYNC: markdownlint-cli2-lint
                - name: markdownlint-cli2-lint
                  glob: "*.md"
                  run: markdownlint-cli2 {files}
                - name: shellcheck
                  glob: "*.{sh,bash}"
                  run: shellcheck {files}
                # SYNC: actionlint
                - name: actionlint
                  glob: ".github/workflows/*.yaml"
                  run: actionlint {files}
                # SYNC: statix-lint
                - name: statix-lint
                  glob: "*.nix"
                  exclude:
                    - npins/*
                    # I want to ignore a fix in this file, but statix doesn't support
                    # ignoring fixes with comments[1] so I'll skip the whole file.
                    #
                    # [1]: https://github.com/oppiliappan/statix/issues/61
                    - nix/packages/default.nix
                  # statix doesn't support passing multiple files yet:
                  # https://github.com/oppiliappan/statix/issues/69
                  run: parallel statix check -- {files}
                # SYNC: nixpkgs-lint
                - name: nixpkgs-lint
                  glob: "*.nix"
                  exclude:
                    - npins/*
                  run: nixpkgs-lint --include-unfinished-lints -- {files}
                # SYNC: typos
                - name: typos
                  run: |
                    {exit_if_no_files} {files}
                    typos {files}
                - name: mypy
                  glob: "*.py"
                  run: mypy {files}
                - name: isutf8
                  run: |
                    {exit_if_no_files} {files}
                    isutf8 {files}
                # SYNC: editorconfig-checker
                - name: editorconfig-checker
                  run: |
                    {exit_if_no_files} {files}
                    editorconfig-checker {files}
                # SYNC: config-file-validator
                - name: config-file-validator
                  glob: "*.{editorconfig,json,ini,yaml,toml}"
                  exclude:
                    # These aren't actually JSON files, they're JSONC
                    - ".vscode/*.json"
                    - npins/*
                  run: chronic validator -groupby pass-fail -- {files}
                - name: renovate-config-validator
                  glob:
                    - renovate.json5
                    - renovate/*.json5
                  run: renovate-config-validator --strict {files}
                - name: lua-ls
                  glob: dotfiles/neovim/*.lua
                  run: |
                    # --configpath is relative to the directory being checked so I'm
                    # using an absolute path instead.
                    lua-language-server \
                      --logpath "$(mktemp --directory)/lua-ls-logs" \
                      --check ./dotfiles/neovim \
                      --configpath "$PWD/.luarc.json"
                - name: nix-config
                  glob:
                    - "*.nix"
                    - flake.nix
                    - flake.lock
                  run: nix config check
          - name: nix-outputs
            # Why `interactive` is enabled:
            #   - This job can take a while so being able to see the output in real
            #     time could reveal bottlenecks.
            #   - If I can see the output in real time, I can spot accidental nix
            #     cache misses and cancel the job instead of waiting for nix to
            #     rebuild the package.
            interactive: true
            glob:
              - "*.nix"
              - flake.lock
              - npins/*
              - nix/*
              - dotfiles/*
              - gozip/*
            run: bash -ceuo pipefail 'nix build --no-link --file . currentPlatformChecks 2>&1 | nom'
