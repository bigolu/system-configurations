# The `excludes` and `includes` properties use globs.

# SYNC: GENERATORS
generators:
  neovim-plugin-list:
    command: bash
    options:
      - scripts/code-generation/generate-neovim-plugin-list.bash
    includes: ["*neovim/lua/*.lua"]
  go-mod-tidy:
    command: bash
    options:
      - scripts/code-generation/go-mod-tidy.bash
    includes: ["*gozip/go.mod"]
  gomod2nix-lock:
    command: bash
    options:
      - scripts/code-generation/generate-gomod2nix-lock.bash
    includes: ["*gozip/go.mod"]
  readme-table-of-contents:
    command: bash
    options:
      - scripts/code-generation/generate-readme-table-of-contents.bash
    includes: [README.md]

linters:
  # SYNC: GENERATED_FILES
  excludes:
    - flake-modules/bundler/gozip/go.sum
    - flake-modules/bundler/gozip/gomod2nix.toml
    - "*.lock"

  fixers:
    deadnix:
      command: deadnix
      options: ["--edit"]
      includes: ["*.nix"]
    statix:
      command: bash
      options:
        - "-euc"
        - |
          # statix doesn't support passing multiple files yet:
          # https://github.com/nerdypepper/statix/issues/69
          parallel statix fix ::: "$@"
        - "--"
      includes: ["*.nix"]
    ruff:
      command: ruff
      options: ["check", "--fix-only"]
      includes: ["*.py"]
    markdownlint-cli2:
      command: markdownlint-cli2
      options: ["--fix"]
      includes: ["*.md"]

  checkers:
    renovate:
      includes: ["*renovate.json5"]
      command: bash
      options:
        - -euc
        - |
          renovate-config-validator --strict "$@" \
            | bash scripts/reviewdog.bash -name=renovate -efm '_REVIEWDOG_DO_NOT_MATCH' -tee
          exit "${PIPESTATUS[0]}"
        - --
    config-file-validator:
      includes: ["*.json", .editorconfig, "*.ini"]
      # VS Code's configuration files end in .json, but they are actually jsonc files
      excludes: ["*.vscode/*.json"]
      command: bash
      options:
        - -euc
        - |
          validator -groupby pass-fail "$@" \
            | bash scripts/reviewdog.bash -name=config-file-validator -efm '_REVIEWDOG_DO_NOT_MATCH' -tee
          exit "${PIPESTATUS[0]}"
        - --
    statix:
      command: bash
      options:
        - -euc
        - |
          # statix doesn't support passing multiple files yet:
          # https://github.com/nerdypepper/statix/issues/70
          parallel -q -- bash -c 'set -o pipefail; statix check {} | bash scripts/reviewdog.bash -name=statix -efm '_REVIEWDOG_DO_NOT_MATCH' -tee' ::: "$@"
        - --
      includes: ["*.nix"]
    actionlint:
      includes: [".github/workflows/*.yaml", ".github/workflows/*.yml"]
      command: bash
      options:
        - -euc
        - |
          actionlint -no-color "$@" \
            | bash scripts/reviewdog.bash -name=actionlint \
              -efm '%f:%l:%c: %m'
        - --
    taplo:
      includes: ["*.toml"]
      command: bash
      options:
        - -euc
        - |
          taplo lint "$@" \
            | bash scripts/reviewdog.bash -name=taplo -efm '_REVIEWDOG_DO_NOT_MATCH' -tee
          exit "${PIPESTATUS[0]}"
        - --
    yaml-lint:
      includes: ["*.yaml", "*.yml"]
      command: bash
      options:
        - -euc
        - |
          yamllint --strict --format parsable "$@" \
            | bash scripts/reviewdog.bash -name=yaml-lint \
              -efm '%f:%l:%c: [%t%*[a-z]] %m'
        - --
    shellcheck:
      includes: ["*.bash", "*.sh"]
      command: bash
      options:
        - -euc
        - |
          shellcheck --format checkstyle --color=never "$@" \
            | bash scripts/reviewdog.bash -name=shellcheck \
              -f checkstyle
        - --
    markdownlint-cli2:
      includes: ["*.md"]
      command: bash
      options:
        - -euc
        - |
          markdownlint-cli2 "$@" \
            | bash scripts/reviewdog.bash -name=markdownlint-cli2 \
              -efm '%f:%l:%c: %m' \
              -efm '%f:%l:%c %m' \
              -efm '%f:%l: %m' \
              -efm '%f:%l %m'
        - --
    desktop-file-validate:
      includes: ["*.desktop"]
      command: bash
      options:
        - -euc
        - |
          desktop-file-validate "$@" \
            | bash scripts/reviewdog.bash -name=desktop-file-validate \
              -efm '%f: %m'
        - --
    fish:
      includes: ["*.fish"]
      command: bash
      options:
        - -euc
        - |
          parallel fish --no-execute '{}' '2>&1' '|' bash scripts/reviewdog.bash -name=fish -efm '"%f (line %l): %m"' ::: "$@"
        - --
    ruff:
      includes: ["*.py"]
      command: bash
      options:
        - -euc
        - |
          ruff check --output-format sarif "$@" \
            | bash scripts/reviewdog.bash -name=ruff -f sarif
        - --
    # golangci-lint:
    #   includes: ["*.go"]
    #   command: bash
    #   options:
    #     - -euc
    #     - |
    #       golangci-lint run --out-format sarif "$@" \
    #         | bash scripts/reviewdog.bash -name=golangci-lint -f sarif
    #     - --
    # TODO: The cli isn't respecting my dictionary or ignore files so I can't use it.
    # https://github.com/valentjn/ltex-ls/issues/283
    # ltex-cli:
    #   includes: ["*.md"]
    #   command: bash
    #   options:
    #     - -euc
    #     - |
    #       ltex-cli --server-command-line=ltex-ls "$@" \
    #         | bash scripts/reviewdog.bash -name=ltex-cli \
    #           -efm '%f:%l:%c: %m'
    #     - --
