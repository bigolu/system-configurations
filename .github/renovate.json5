{
  $schema: "https://docs.renovatebot.com/renovate-schema.json",
  extends: ["config:best-practices", ":semanticCommitsDisabled"],
  // Nix support is currently in beta so you have to opt in.
  nix: {
    enabled: true,
  },
  postUpdateOptions: ["gomodTidy"],
  osvVulnerabilityAlerts: true,
  commitMessagePrefix: "deps:",
  separateMultipleMajor: true,
  lockFileMaintenance: {
    enabled: true,

    automerge: true,
    // I'm using the branch type, instead of the pull request type, for auto merge
    // so I don't get notifications for them.
    automergeType: "branch",
    // Normally, I only run CI checks for pull requests, but since Renovate will
    // merge these changes straight from a branch I need to run checks on them as
    // well. To identify these changes, I'm adding a prefix to their branch name.
    additionalBranchPrefix: "branch-automerge/",
  },
  digest: {
    automerge: true,
    automergeType: "branch",
    additionalBranchPrefix: "branch-automerge/",
  },
  pin: {
    automerge: true,
    automergeType: "branch",
    additionalBranchPrefix: "branch-automerge/",
  },
  pinDigest: {
    automerge: true,
    automergeType: "branch",
    additionalBranchPrefix: "branch-automerge/",
  },
  packageRules: [
    // This rule enables auto merge for all post-1.0, minor/patch version changes.
    // These changes won't be breaking so passing CI checks is sufficient to merge
    // them.
    {
      matchUpdateTypes: ["minor", "patch"],
      // Don't auto merge if the major version is 0, in which case a minor/patch
      // update may be a breaking change. The '[~^]?' is to account for version
      // specifiers like '~0.1.2'. Renovate is planning to introduce the concept of
      // breaking/non-breaking version changes[1] so I should use that when it's
      // available.
      //
      // [1]: https://github.com/renovatebot/renovate/issues/24513
      matchCurrentVersion: "!/^[~^]?0/",

      automerge: true,
      automergeType: "branch",
      additionalBranchPrefix: "branch-automerge/",
    },
    {
      matchManagers: ["gomod"],

      // This setting is only allowed on self-hosted Renovate instances
      postUpgradeTasks: {
        commands: [
          "[ -f {{{packageFileDir}}}/gomod2nix.toml ] && gomod2nix --dir {{{packageFileDir}}} generate || true",
        ],
      },
    },
    {
      matchDepNames: ["nix-community/nix-direnv"],

      // This setting is only allowed on self-hosted Renovate instances
      postUpgradeTasks: {
        commands: ["./scripts/ci/set-nix-direnv-hash.bash {{{packageFile}}}"],
      },
    },
    {
      matchManagers: ["nix"],
      matchUpdateTypes: ["lockFileMaintenance"],

      // This setting is only allowed on self-hosted Renovate instances
      postUpgradeTasks: {
        commands: ["./scripts/code-generation/sync-nix-version.bash"],
      },
    },
  ],
  customManagers: [
    {
      customType: "regex",
      datasourceTemplate: "github-releases",
      depNameTemplate: "nix-community/nix-direnv",
      fileMatch: ["(^|/).envrc$"],
      matchStrings: [
        "['\"]https:\\/\\/raw\\.githubusercontent\\.com\\/nix-community\\/nix-direnv\\/(?<currentValue>.+)\\/direnvrc['\"]",
      ],
    },
  ],
}
