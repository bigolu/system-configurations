name: Setup
description: Install Nix, configure the cache(s), and load direnv.
inputs:
  dev-shell:
    description: The name of the devShell to activate
    required: false
    default: ""
  cachix-auth-token:
    description: >
      An authentication token for Cachix. Only necessary for pushing to the cache.
    required: false
    default: ""
  use-magic-nix-cache:
    description: Use Magic Nix Cache
    required: false
    default: "true"
runs:
  using: "composite"
  steps:
    # TODO: Renovate won't manage this action's version until the following is
    # resolved:
    # https://github.com/renovatebot/renovate/issues/28016
    - uses: DeterminateSystems/nix-installer-action@main
    # TODO: Ideally, I would only read from the GitHub Actions cache since it will be
    # the closest cache to the workflow runners. However, since the packages from my
    # flake that I want to cache aren't pushed to the GitHub Action cache, I read
    # those packages from this cache. The reason I can't push those packages to
    # Github Actions is explained in the package-caching workflow.
    - uses: cachix/cachix-action@ad2ddac53f961de1989924296a1f236fcfbaa4fc # v15
      with:
        name: bigolu
        authToken: "${{ inputs.cachix-auth-token }}"
        skipPush: "${{ inputs.cachix-auth-token == '' && 'true' || 'false' }}"
    - if: inputs.use-magic-nix-cache == 'true'
      # TODO: Renovate won't manage this action's version until the following is
      # resolved:
      # https://github.com/renovatebot/renovate/issues/28016
      uses: DeterminateSystems/magic-nix-cache-action@main
      with:
        # Since I want to cache everything, I set this to a URL that doesn't belong
        # to any of my substituters.
        upstream-cache: https://example.com
        use-flakehub: false
    # Since this is the step that loads a dev shell, there isn't one loaded here. So
    # instead of calling ci-bash directly like I usually do, I'll use `nix run`.
    - shell: nix run --impure --expr 'import ./nix/flake-package-set.nix' ci-bash -- {0}
      env:
        INPUT_DEV_SHELL: ${{ inputs.dev-shell }}
      run: |
        if [[ -n $INPUT_DEV_SHELL ]]; then
          export DEV_SHELL="$INPUT_DEV_SHELL"
        fi

        ./scripts/ci/direnv.bash \
          export gha >> "$GITHUB_ENV"

        # GitHub Actions handles the PATH differently
        ./scripts/ci/direnv.bash \
          exec . bash -c 'echo "$PATH"' >> "$GITHUB_PATH"
