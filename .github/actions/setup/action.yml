name: Setup
description: Install Nix, configure the cache(s), and load direnv.
inputs:
  dev-shell:
    description: The name of the devShell to activate
    required: false
    default: ci
  cachix-auth-token:
    description: >
      An authentication token for Cachix. Only necessary for pushing to the cache.
    required: false
    default: ""
  use-magic-nix-cache:
    description: Use Magic Nix Cache
    required: false
    default: "true"
runs:
  using: "composite"
  steps:
    # TODO: Renovate won't manage this action's version until the following is
    # resolved:
    # https://github.com/renovatebot/renovate/issues/28016
    - uses: DeterminateSystems/nix-installer-action@main
    # TODO: Ideally, I would only read from the GitHub Actions cache in CI since it
    # will be the closest cache to the workflow runners. However, since the packages
    # from my flake that I want to cache aren't pushed to the GitHub Action cache, I
    # read those packages from this cache. The reason I can't push those packages to
    # Github Actions as well is explained in the package-caching workflow.
    - uses: cachix/cachix-action@ad2ddac53f961de1989924296a1f236fcfbaa4fc # v15
      with:
        name: bigolu
        authToken: "${{ inputs.cachix-auth-token }}"
        skipPush: "${{ inputs.cachix-auth-token == '' && 'true' || 'false' }}"
    - if: inputs.use-magic-nix-cache == 'true'
      # TODO: Renovate won't manage this action's version until the following is
      # resolved:
      # https://github.com/renovatebot/renovate/issues/28016
      uses: DeterminateSystems/magic-nix-cache-action@main
      with:
        # Since I want to cache everything, I set this to a URL that doesn't belong
        # to any of my substituters.
        upstream-cache: https://example.com
        use-flakehub: false
    # Since this is the step that loads a dev-shell, there isn't one loaded here. So
    # instead of using ci-bash like I usually do, I'll use "bash". When the value is
    # "bash", GitHub Actions will run:
    # bash --noprofile --norc -eo pipefail {0}
    - shell: bash
      env:
        DEV_SHELL: ${{ inputs.dev-shell }}
      run: |
        # The runner already has Bash, but the version of that Bash may not have all
        # of the features that get used in the .envrc.
        nix profile install --impure --expr 'import ./packages.nix' \
          bashInteractive direnv

        direnv allow .
        direnv export gha >> "$GITHUB_ENV"
        # GitHub Actions handles the PATH differently
        direnv exec . bash -c 'echo "$PATH"' >> "$GITHUB_PATH"
