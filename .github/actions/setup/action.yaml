name: Setup
description: Install Nix, configure the cache(s), and load direnv.
inputs:
  dev-shell:
    description: The name of the devShell to activate
    required: false
    default: ""
  cachix-auth-token:
    description: >
      An authentication token for Cachix. Only necessary for pushing to the cache.
    required: false
    default: ""
runs:
  using: "composite"
  steps:
    - uses: cachix/install-nix-action@08dcb3a5e62fa31e2da3d490afc4176ef55ecd72 # v30
      with:
        # TODO: See if this can be done by default, seems reasonable since they
        # already enable flakes by default and any attempt to access <nixpkgs>
        # without this would fail.
        nix_path: nixpkgs=flake:nixpkgs
        # Use this until a new version of the action is released with nix v2.25.3+
        install_url: https://releases.nixos.org/nix/nix-2.25.3/install
    - uses: cachix/cachix-action@ad2ddac53f961de1989924296a1f236fcfbaa4fc # v15
      with:
        name: bigolu
        authToken: "${{ inputs.cachix-auth-token }}"
        skipPush: "${{ inputs.cachix-auth-token == '' && 'true' || 'false' }}"
    # Since this is the step that loads a dev shell, there isn't one loaded here. So
    # instead of directly using ci-bash as the shell, like I do in other workflows,
    # I'll use ci-bash through `nix run`.
    #
    # Regarding the expression for --expr: Normally, you call a function in Nix using
    # a space e.g. `function argument`, but since GitHub Actions splits the command
    # for 'shell' on spaces, I used parentheses instead.
    - shell: nix run --impure --expr import(./nix/flake-package-set.nix) ci-bash -- {0}
      env:
        INPUT_DEV_SHELL: ${{ inputs.dev-shell }}
      run: |
        # I only want to set the DEV_SHELL environment variable if the workflow using
        # this action provided the dev-shell input. Since you can't conditionally set
        # environment variables in GitHub Actions, I'm doing it here.
        if [[ -n $INPUT_DEV_SHELL ]]; then
          export DEV_SHELL="$INPUT_DEV_SHELL"
        fi

        ./scripts/direnv.bash export gha >> "$GITHUB_ENV"
        # GitHub Actions handles the PATH differently
        ./scripts/direnv.bash exec . bash -c 'echo "$PATH"' >> "$GITHUB_PATH"
