name: Setup
description: Install Nix and load direnv.
inputs:
  nix-dev-shell:
    description: The name of the devShell to activate
    required: false
    default: ""
  cache:
    description: Whether the cache should be enabled. Pass "true" to enable it
    required: false
    default: ""
  cache-key-suffix:
    description: >
      Can be provided to optimize cache hits. Usually it's something like
      `hashFiles(<pattern>)` where <pattern> matches any file that could change
      the version of a package (e.g. flake.lock) or which packages are included in
      the devShell.
    required: false
    # By using the SHA, we err on the side of excessive cache saves as opposed to
    # excessive pulls from the Nix foundation's cache. In other words, we'll assume
    # that a cache is invalid more often than it actually is and unnecessarily push a
    # new cache to GitHub Actions. If we didn't, then we would instead assume a cache
    # is valid more often than it actually is and have to pull Nix's cache when we're
    # wrong. This trade-off seems reasonable since I assume that pushing to GHA's
    # cache is faster than pulling from Nix's cache. I assume this because I also
    # assume that the GHA runners are geographically closer to GHA's cache than Nix's
    # cache.
    default: ${{ github.sha }}
runs:
  using: "composite"
  steps:
    # The action run after this, nix-community/cache-nix-action, depends on this
    # specific nix installer. Though there's an open issue for using a different
    # installer: https://github.com/nix-community/cache-nix-action/issues/60
    - uses: nixbuild/nix-quick-install-action@v30
      with:
        nix_conf: |
          # Increase the buffer limit to 124MiB since the buffer would often reach
          # the default limit of 64MiB.
          download-buffer-size = 134217728
          show-trace = true
    - if: ${{ inputs.cache == 'true' }}
      env:
        CACHE_KEY_PREFIX: nix-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-
      uses: nix-community/cache-nix-action@v6
      with:
        # The default is 32 MiB. Assuming the network connection between the runner
        # and cache is reliable, 256 MiB should also work while being faster.
        upload-chunk-size: 268435456
        primary-key: ${{ env.CACHE_KEY_PREFIX }}${{ inputs.cache-key-suffix }}
        # If there's no cache hit, restore the most recently used cache with this
        # prefix.
        restore-prefixes-first-match: ${{ env.CACHE_KEY_PREFIX }}
        # The combination of the purge inputs below gives us the following behavior:
        # Delete all caches with a key whose prefix is `env.CACHE_KEY_PREFIX`, unless
        # the key is what we specified for the `primary-key` input. In other words,
        # we only keep the cache created by the current job run and delete the ones
        # made by previous job runs.
        purge: true
        purge-primary-key: never
        purge-prefixes: ${{ env.CACHE_KEY_PREFIX }}
        # TODO: Caches are only purged if I add these, but they shouldn't be
        # necessary. I should open an issue.
        purge-created: 0
        purge-last-accessed: 0
    - shell: nix run --file nix/packages.nix bash-script -- {0}
      env:
        NIX_DEV_SHELL: ${{ inputs.nix-dev-shell }}
      run: |
        nix-shell direnv/direnv-wrapper.bash direnv/ci.bash \
          export gha >> "$GITHUB_ENV"
        # TODO: Setting the PATH with GITHUB_ENV doesn't work[1].
        #
        # [1]: https://github.com/actions/toolkit/issues/655
        nix-shell direnv/direnv-wrapper.bash direnv/ci.bash \
          exec . bash -c 'echo "$PATH"' >> "$GITHUB_PATH"
