name: Save Cache
description: Save cache
runs:
  using: "composite"
  steps:
    - id: pre-nix-cache-save
      shell: nix run --file . devShells.ci-save-cache-action -- bash-script {0}
      run: |
        old="$HOME/.cache/gc-roots"

        new="$(mktemp)"
        {
          # We only want extant symlink destinations to be printed, but we don't want
          # realpath to exit with a non-zero code if it encounters a broken symlink
          # since that would cause the script to exit.
          set +o errexit
          realpath --quiet --canonicalize-existing /nix/var/nix/gcroots/auto/*
          set -o errexit
        } |
          # `comm` requires input files to be sorted. They also need to be sorted
          # before comparing old to new.
          sort >"$new"

        if [[ -e $old && $(<"$old") == $(<"$new") ]]; then
          echo 'should-save=false' >>"$GITHUB_OUTPUT"
          exit
        else
          echo 'should-save=true' >>"$GITHUB_OUTPUT"
        fi

        if [[ -e $old ]]; then
          echo '::group::GC roots diff'
          echo 'Added roots:'
          comm --nocheck-order -13 "$old" "$new"
          echo
          echo 'Removed roots:'
          comm --nocheck-order -23 "$old" "$new"
          echo '::endgroup::'
        else
          echo 'Old cache did not exist'
        fi

        echo '::group::All new roots'
        cat "$new"
        echo '::endgroup::'

        # Run garbage collection to stop the nix store from growing indefinitely.
        # This can happen because on a cache miss, we restore from the most recently
        # used cache entry so we have to avoid accumulating data from old cache
        # entries over time.
        echo '::group::Garbage collection logs'
        nix-collect-garbage --delete-old
        echo '::endgroup::'

        # Delete these directories for the same reason as above.
        #
        # TODO: I don't even want to cache these directories in the first place,
        # they're added by default by cache-nix-action. I tried to remove them by
        # adding `!<path>` the `paths` inputs, but it didn't work which I think is
        # because of this issue[1]. On one of my workflows, these directories were
        # ~200 MB so removing them saves a lot of space.
        #
        # [1]: https://github.com/actions/toolkit/issues/713
        sudo rm -rf ~root/.cache/nix
        # If `fetchTree` is used and nix doesn't find a valid cache entry in
        # `fetcher-cache` it will refetch the content. To avoid that we keep the
        # `fetcher-cache`. For example, `nix flake archive` uses `fetchTree`.
        paths_to_delete=()
        for path in ~/.cache/nix/*; do
          if [[ ! $path =~ fetcher-cache* ]]; then
            paths_to_delete+=("$path")
          fi
        done
        rm -rf "${paths_to_delete[@]}"

        cp "$new" "$old"
    - if: steps.pre-nix-cache-save.outputs.should-save == 'true'
      uses: nix-community/cache-nix-action/save@135667ec418502fa5a3598af6fb9eb733888ce6a # v6
      with:
        # SYNC: cache-settings-nix
        #
        # GitHub doesn't let you overwrite a cache, but this action lets you delete a
        # cache with the primary key before saving one, effectively letting you
        # overwrite a cache. The problem with this is that in between deleting the
        # old cache and saving the new one, there will be no cache available to
        # restore from. Instead, we add a suffix to the key that will always be
        # unique: run_{id,number,attempt}. After saving the new cache, we delete all
        # old caches.
        primary-key: nix-${{ github.ref_name }}-${{ github.workflow }}-${{ github.job }}-${{ runner.arch }}-${{ runner.os }}-${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}
        purge: true
        purge-primary-key: "never"
        purge-prefixes: |
          nix-${{ github.ref_name }}-${{ github.workflow }}-${{ github.job }}-${{ runner.arch }}-${{ runner.os }}-
        # TODO: Cache entries are only purged if I add these two inputs, but they
        # shouldn't be necessary. I should open an issue.
        purge-created: 0
        purge-last-accessed: 0
        paths: |
          ~/.cache/gc-roots
