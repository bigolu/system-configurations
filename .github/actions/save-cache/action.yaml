name: Save Cache
description: Save cache
runs:
  using: "composite"
  steps:
    - id: pre-nix-cache-save
      shell: bash-script {0}
      run: |
        old="$HOME/.cache/gc-roots"

        new="$(mktemp)"
        {
          # We only want extant symlink destinations to be printed, but we don't want
          # realpath to exit with a non-zero code if it encounters a broken symlink
          # since that would cause the script to exit.
          set +o errexit
          realpath --quiet --canonicalize-existing /nix/var/nix/gcroots/auto/*
          set -o errexit
        } |
          # `comm` requires input files to be sorted
          sort >"$new"

        echo user:
        du --dereference --human-readable --summarize --apparent-size ~/.cache/nix/*
        echo root:
        sudo du --dereference --human-readable --summarize --apparent-size ~root/.cache/nix/*
        cat "$new"
        rm -rf ~/.cache/nix
        sudo rm -rf ~root/.cache/nix
        readarray -t x <"$new"
        for a in "${x[@]}"; do
          printf "$a: "
          numfmt --to=iec-i --suffix=B --format="%9.2f" -- "$(nix path-info --closure-size "$a")"
        done

        if [[ -e $old && $(<"$old") == $(<"$new") ]]; then
          echo 'should-save=false' >>"$GITHUB_OUTPUT"
          exit
        else
          echo 'should-save=true' >>"$GITHUB_OUTPUT"
        fi

        if [[ -e $old ]]; then
          echo '::group::GC roots diff'
          echo 'Added roots:'
          comm --nocheck-order -13 "$old" "$new"
          echo
          echo 'Removed roots:'
          comm --nocheck-order -23 "$old" "$new"
          echo
          echo 'All new roots:'
          cat "$new"
          echo '::endgroup::'
        else
          echo 'Old cache did not exist'
        fi

        # Run garbage collection to stop the nix store from growing indefinitely.
        # This can happen because on a cache miss, we restore from the most recently
        # used cache entry so we have to avoid accumulating data from old cache
        # entries over time.
        echo '::group::Garbage collection logs'
        nix-collect-garbage --delete-old
        echo '::endgroup::'

        cp "$new" "$old"
    - if: steps.pre-nix-cache-save.outputs.should-save == 'true'
      uses: nix-community/cache-nix-action/save@135667ec418502fa5a3598af6fb9eb733888ce6a # v6
      with:
        purge: true
        purge-primary-key: always
        # SYNC: cache-settings-nix
        primary-key: nix-${{ github.workflow }}-${{ github.job }}-${{ runner.arch }}-${{ runner.os }}
        paths: |
          ~/.cache/gc-roots
    - id: pre-direnv-cache-save
      shell: bash-script {0}
      run: |
        old="$HOME/.cache/direnv-files"

        new="$(mktemp)"
        shopt -s globstar
        # If the home directory changes, that shouldn't affect the cache.
        realpath --relative-to="$HOME/.cache/direnv" ~/.cache/direnv/** >"$new"

        if [[ ! -e $old ]]; then
          echo 'Old cache did not exist'
          echo 'should-save=true' >>"$GITHUB_OUTPUT"
          echo 'should-purge=true' >>"$GITHUB_OUTPUT"
          cp "$new" "$old"
        elif [[ $(<"$old") != $(<"$new") ]]; then
          echo '::group::direnv files diff'
          echo 'Added files:'
          comm --nocheck-order -13 "$old" "$new"
          echo
          echo 'Removed files:'
          comm --nocheck-order -23 "$old" "$new"
          echo
          echo 'All new files:'
          cat "$new"
          echo '::endgroup::'

          # Since we can't run garbage collection as we do with the nix store, we
          # purge the cache instead. This is to prevent it from growing indefinitely.
          # This can happen because on a cache miss, we restore from the most
          # recently used cache entry so we have to avoid accumulating data from old
          # cache entries over time.
          #
          # Note that since we restore from the most recently used cache, `new` will
          # only be different than `old` if we start using a new direnv plugin, but
          # not if we stop using one since direnv won't remove plugins that we don't
          # use.
          echo 'should-purge=true' >>"$GITHUB_OUTPUT"
          echo 'should-save=false' >>"$GITHUB_OUTPUT"
        fi
    - if: steps.pre-direnv-cache-save.outputs.should-save == 'true' || steps.pre-direnv-cache-save.outputs.should-purge == 'true'
      uses: nix-community/cache-nix-action/save@135667ec418502fa5a3598af6fb9eb733888ce6a # v6
      with:
        save: ${{ steps.pre-direnv-cache-save.outputs.should-save }}
        purge: ${{ steps.pre-direnv-cache-save.outputs.should-purge }}
        purge-primary-key: always
        # SYNC: cache-settings-direnv
        nix: false
        primary-key: direnv-${{ runner.os }}
        paths: |
          ~/.cache/direnv-files
          ~/.cache/direnv
