// TODO: Regarding the automerge settings: I used to have them in a separate preset,
// since they are repeated a few times in this config. However,
// `renovate-config-validator` would consider the config invalid, despite the fact
// that the `renovate` program had no problem using it. An issue was opened for this
// where a Renovate author said they never intended for presets to be used inside of
// package rules[1]. The issue has since gone stale, but maybe I should reopen it.
//
// [1]: https://github.com/renovatebot/renovate/issues/7373#issuecomment-824815983
{
  $schema: "https://docs.renovatebot.com/renovate-schema.json",
  description: "This preset contains all of the settings that I usually add to a configuration. I use this as a starting point for my projects.",
  extends: ["config:best-practices", ":semanticCommitsDisabled"],
  // This is an experimental feature that may be removed at any time so you have to
  // opt in: https://github.com/renovatebot/renovate/discussions/20542
  osvVulnerabilityAlerts: true,
  commitMessagePrefix: "deps:",
  postUpdateOptions: ["gomodTidy"],
  separateMultipleMajor: true,
  lockFileMaintenance: {
    enabled: true,

    automerge: true,
    // I'm using the branch type, instead of the pull request type, for auto merge so I
    // don't get notifications for them.
    automergeType: "branch",
    // Normally, I only run CI checks for pull requests, but since I'm configuring
    // Renovate to merge directly from a branch I need to run checks on those branches.
    // To identify these branches in CI, I'm adding a prefix to their name.
    additionalBranchPrefix: "branch-automerge/",
  },
  digest: {
    automerge: true,
    // I'm using the branch type, instead of the pull request type, for auto merge so I
    // don't get notifications for them.
    automergeType: "branch",
    // Normally, I only run CI checks for pull requests, but since I'm configuring
    // Renovate to merge directly from a branch I need to run checks on those branches.
    // To identify these branches in CI, I'm adding a prefix to their name.
    additionalBranchPrefix: "branch-automerge/",
  },
  pin: {
    automerge: true,
    // I'm using the branch type, instead of the pull request type, for auto merge so I
    // don't get notifications for them.
    automergeType: "branch",
    // Normally, I only run CI checks for pull requests, but since I'm configuring
    // Renovate to merge directly from a branch I need to run checks on those branches.
    // To identify these branches in CI, I'm adding a prefix to their name.
    additionalBranchPrefix: "branch-automerge/",
  },
  pinDigest: {
    automerge: true,
    // I'm using the branch type, instead of the pull request type, for auto merge so I
    // don't get notifications for them.
    automergeType: "branch",
    // Normally, I only run CI checks for pull requests, but since I'm configuring
    // Renovate to merge directly from a branch I need to run checks on those branches.
    // To identify these branches in CI, I'm adding a prefix to their name.
    additionalBranchPrefix: "branch-automerge/",
  },
  customManagers: [
    {
      customType: "regex",
      datasourceTemplate: "github-releases",
      depNameTemplate: "nix-community/nix-direnv",
      fileMatch: ["(^|/)direnv/.*$"],
      matchStrings: [
        // This will match text with the following pattern:
        //   # renovate: nix-direnv
        //   source_url<separator><nix-direnv-url>
        // Where <separator> is anything that can separate two tokens in Bash i.e. a
        // ' ' or a backslash followed by a newline, which allows you to continue a
        // statement on another line.
        "#\\s+renovate: nix-direnv\\s+source_url( |\\\\\\n)+['\"]https://raw\\.githubusercontent\\.com/nix-community/nix-direnv/(?<currentValue>.+)/direnvrc['\"]",
      ],
    },

    // This manager will update GitHub Actions runner versions that are _not_
    // specified with the `runs-on` key. Renovate already detects runner versions
    // that are specified with the `runs-on` key. This will account for runner
    // versions that I specify in variables.
    {
      customType: "regex",
      depTypeTemplate: "github-runner",
      datasourceTemplate: "github-runners",
      // These file matches were taken from the Renovate GitHub Actions manager:
      // https://docs.renovatebot.com/modules/manager/github-actions/#file-matching
      fileMatch: [
        "(^|/)(workflow-templates|\\.(?:github|gitea|forgejo)/(?:workflows|actions))/.+\\.ya?ml$",
        "(^|/)action\\.ya?ml$",
      ],
      matchStrings: [
        // This regex will match text in the form
        // '<depName>-<currentVersion> # renovate: github-runner'. If there are multiple dashes,
        // depName is everything up until the first dash.
        "(?<depName>[^\\s]+?)-(?<currentValue>.*)\\s+#\\s+renovate: github-runner",
      ],
    },
  ],
  // Nix support is currently in beta so you have to opt in.
  nix: { enabled: true },
  packageRules: [
    // I prefer updating all flake inputs together. I prefer this because for certain
    // inputs, like nixpkgs, I have their dependents all use the same version/commit
    // of them. I do this because having multiple versions of them would cost more
    // space and evaluation time[1]. Since I do this, I don't want to update those
    // inputs without updating all of their dependents since they will now have to
    // use the new version of the input.
    //
    // I could use Lock file maintenance (LFM) for this, but LFM can't be grouped
    // with other updates[2]. Since I may want to group flake input updates together
    // with other updates, I'll disable LFM. Instead of LFM, I group all individual
    // flake input updates together, which is effectively the same as LFM.
    //
    // [1]: https://zimbatm.com/notes/1000-instances-of-nixpkgs
    // [2]: https://github.com/renovatebot/renovate/discussions/13355#discussioncomment-1910497
    {
      matchManagers: ["nix"],
      matchUpdateTypes: ["lockFileMaintenance"],
      enabled: false,
    },
    {
      // Avoid a conflict with the nixpkgs channel input update[1].
      //
      // [1]: https://github.com/renovatebot/renovate/blob/855a486e783d5478549f1dc9393fe128fa5a6b43/lib/modules/manager/nix/extract.ts#L31
      matchManagers: ["nix"],
      enabled: false,
    },
    {
      matchManagers: ["nix"],
      matchDepNames: ["home-manager"],
      enabled: true,
    },
    {
      matchManagers: ["nix"],
      matchDepNames: ["nixpkgs-stable"],
      versioning: "nixpkgs",
      enabled: true,
    },
    {
      // I'm only matching the manager so I can match the two different types of
      // flake input updates. One type is only for nixpkgs channel inputs[1] and the
      // other type is for the rest[2].
      //
      // [1]: https://github.com/renovatebot/renovate/blob/855a486e783d5478549f1dc9393fe128fa5a6b43/lib/modules/manager/nix/extract.ts#L31
      // [2]: https://github.com/renovatebot/renovate/blob/855a486e783d5478549f1dc9393fe128fa5a6b43/lib/modules/manager/nix/extract.ts#L64
      matchManagers: ["nix"],
      groupName: "flake inputs",
    },

    // This rule enables auto merge for all post-1.0, minor/patch version changes.
    // These changes won't be breaking so passing CI checks is sufficient to merge
    // them.
    {
      matchUpdateTypes: ["minor", "patch"],
      // Don't auto merge if the major version is 0, in which case a minor/patch
      // update may be a breaking change. The '[~^]?' is to account for version
      // specifiers like '~0.1.2'. Renovate is planning to introduce the concept of
      // breaking/non-breaking version changes[1] so I should use that when it's
      // available.
      //
      // [1]: https://github.com/renovatebot/renovate/issues/24513
      matchCurrentVersion: "!/^[~^]?0/",

      automerge: true,
      // I'm using the branch type, instead of the pull request type, for auto merge
      // so I don't get notifications for them.
      automergeType: "branch",
      // Normally, I only run CI checks for pull requests, but since I'm configuring
      // Renovate to merge directly from a branch I need to run checks on those
      // branches. To identify these branches in CI, I'm adding a prefix to their
      // name.
      additionalBranchPrefix: "branch-automerge/",
    },

    {
      matchManagers: ["gomod"],
      postUpgradeTasks: {
        commands: [
          'cached-nix-shell "$RENOVATE_BOT_REPO/renovate/global/scripts/regenerate-gomod2nix-lock.bash" {{{packageFileDir}}}',
        ],
      },
    },
    {
      matchDepNames: ["nix-community/nix-direnv"],
      postUpgradeTasks: {
        commands: [
          'cached-nix-shell "$RENOVATE_BOT_REPO/renovate/global/scripts/update-nix-direnv-hash.bash" {{{packageFile}}}',
        ],
      },
    },
    {
      // This is the last version of macOS that GitHub Actions still runs on Intel so
      // I'll assume that if I specified this version, I don't want to upgrade.
      matchDepTypes: ["github-runner"],
      matchDepNames: ["macos"],
      matchCurrentVersion: "13",
      enabled: false,
    },
  ],
}
