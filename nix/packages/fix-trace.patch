diff --git a/nix-trace/trace-nix.c b/nix-trace/trace-nix.c
index 6cd10b8..13e5b2f 100644
--- a/nix-trace/trace-nix.c
+++ b/nix-trace/trace-nix.c
@@ -21,6 +21,7 @@ static const char *pwd = NULL;
 static char tmp_prefix[PATH_MAX];  // "$TMPDIR/nix-$$-"
 static size_t tmp_prefix_dirname_len = 0;  // Length of "$TMPDIR"
 static size_t tmp_prefix_basename_len = 0;  // Length of "nix-$$-"
+static char nix_shell_tmp_prefix[PATH_MAX];  // "$TMPDIR/nix-shell-$$-"
 
 #define FATAL() \
 	do { \
@@ -96,9 +97,17 @@ static void __attribute__((constructor)) init() {
 	// References:
 	//   https://github.com/NixOS/nix/blob/2.15.1/src/libutil/filesystem.cc#L18
 	//   https://github.com/NixOS/nix/blob/2.15.1/src/libutil/util.hh#L337-L338
-	const char *tmpdir = getenv("TMPDIR");
-	if (tmpdir == NULL)
-		tmpdir = "/tmp";
+#ifdef __APPLE__
+		// TODO: nix unsets TMPDIR on macOS[1][2] so we shouldn't use it.
+		//
+		// [1]: https://github.com/NixOS/nix/issues/7731
+		// [2]: https://github.com/NixOS/nix/blob/b124512388378cd38c4e353ddb387905d296e877/src/libstore/globals.cc#L382
+		const char *tmpdir = "/tmp";
+#else
+		const char *tmpdir = getenv("TMPDIR");
+		if (tmpdir == NULL)
+			tmpdir = "/tmp";
+#endif
 	char tmpdir_real[PATH_MAX];
 	if (realpath(tmpdir, tmpdir_real) == NULL) {
 		fprintf(stderr, "trace-nix: cannot resolve TMPDIR: %s\n", strerror(errno));
@@ -108,6 +117,7 @@ static void __attribute__((constructor)) init() {
 	const char *tmpdirend = tmpdir_real + strlen(tmpdir_real);
 	while (tmpdirend > tmpdir_real && tmpdirend[-1] == '/')
 		tmpdirend--;
+
 	int len = snprintf(tmp_prefix, sizeof tmp_prefix,
 		"%.*s/nix-%" PRIu64 "-",
 		(int)(tmpdirend - tmpdir_real),
@@ -119,6 +129,16 @@ static void __attribute__((constructor)) init() {
 		fprintf(stderr, "trace-nix: TMPDIR too long\n");
 		tmp_prefix[0] = '\0';
 	}
+
+	int nix_shell_len = snprintf(nix_shell_tmp_prefix, sizeof nix_shell_tmp_prefix,
+		"%.*s/nix-shell-%" PRIu64 "-",
+		(int)(tmpdirend - tmpdir_real),
+		tmpdir_real,
+		(uint64_t)getpid());
+	if (nix_shell_len < 0 || nix_shell_len >= sizeof nix_shell_tmp_prefix) {
+		fprintf(stderr, "trace-nix: TMPDIR too long\n");
+		nix_shell_tmp_prefix[0] = '\0';
+	}
 }
 
 #ifdef __APPLE__
@@ -162,7 +182,29 @@ WRAPPER(int, open, (const char *path, int flags, ...)) {
 
 	int fd = REAL(open)(path, flags, mode);
 
-	if (flags == (O_RDONLY|O_CLOEXEC) && enable(path)) {
+	if (enable(path)) {
+		if (fd == -1) {
+			print_log('f', path, "-");
+		} else {
+			char digest[LEN*2+1];
+			hash_file(digest, fd);
+			print_log('f', path, digest);
+		}
+	}
+
+	return fd;
+}
+
+#ifdef __linux__
+WRAPPER(int, open64, (const char *path, int flags, ...)) {
+	va_list args;
+	va_start(args, flags);
+	int mode = va_arg(args, int);
+	va_end(args);
+
+	int fd = REAL(open64)(path, flags, mode);
+
+	if (enable(path)) {
 		if (fd == -1) {
 			print_log('f', path, "-");
 		} else {
@@ -174,6 +216,7 @@ WRAPPER(int, open, (const char *path, int flags, ...)) {
 
 	return fd;
 }
+#endif
 
 WRAPPER(DIR *, opendir, (const char *path)) {
 	DIR *dirp = REAL(opendir)(path);
@@ -257,6 +300,15 @@ static int enable(const char *path) {
 		"/nix/store/", // assuming store paths are immutable
 		"/nix/var/nix/temproots/",
 		"/proc/",
+		// On macOS 15.5 /dev/autofs_nowait was accessed, but I don't think devices
+		// should be tracked in general.
+		"/dev",
+		// On Pop!_OS
+		// /sys/fs/cgroup//user.slice/user-1000.slice/user@1000.service/app.slice/app-cosmic-code-5135.scope/cpu.max
+		// was accessed, but I don't think this directory should be tracked in general.
+		"/sys",
+		tmp_prefix,
+		nix_shell_tmp_prefix,
 		NULL,
 	};
 	for (const char **p = ignored_paths; *p; p++)
diff --git a/src/main.rs b/src/main.rs
index 5029a26..268e1b5 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -181,8 +181,6 @@ fn args_to_inp(pwd: PathBuf, x: &Args) -> NixShellInput {
         let whitelist = &[
             "HOME",
             "NIX_PATH",
-            // tmp dir
-            "TMPDIR",
             "XDG_RUNTIME_DIR",
             // ssl-related
             "CURL_CA_BUNDLE",
@@ -195,6 +193,14 @@ fn args_to_inp(pwd: PathBuf, x: &Args) -> NixShellInput {
             "ftp_proxy",
             "all_proxy",
             "no_proxy",
+            // tmp dir
+            //
+            // TODO: nix unsets TMPDIR on macOS[1][2] so we shouldn't use it.
+            //
+            // [1]: https://github.com/NixOS/nix/issues/7731
+            // [2]: https://github.com/NixOS/nix/blob/b124512388378cd38c4e353ddb387905d296e877/src/libstore/globals.cc#L382
+            #[cfg(not(target_os = "macos"))]
+            "TMPDIR",
         ];
         for var in whitelist {
             if let Some(val) = std::env::var_os(var) {
